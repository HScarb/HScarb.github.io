(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{613:function(t,_,a){"use strict";a.r(_);var e=a(17),v=Object(e.a)({},(function(){var t=this,_=t.$createElement,a=t._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("原文地址："),a("a",{attrs:{href:"http://hscarb.github.io/rabbitmq/20220610-rabbitmq-store.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://hscarb.github.io/rabbitmq/20220610-rabbitmq-store.html"),a("OutboundLink")],1)]),t._v(" "),a("h1",{attrs:{id:"rabbitmq-存储机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq-存储机制"}},[t._v("#")]),t._v(" RabbitMQ 存储机制")]),t._v(" "),a("h2",{attrs:{id:"_1-背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-背景"}},[t._v("#")]),t._v(" 1. 背景")]),t._v(" "),a("p",[t._v("RabbitMQ 的存储设计与 Kafka、RocketMQ 等消息队列有较大的不同。RabbitMQ 在设计上更倾向于消息被及时消费，或者是存储在内存中以达到更高的生产和消费效率，而不是直接存储在磁盘中。")]),t._v(" "),a("p",[t._v("当然，RabbitMQ 也支持通过配置"),a("strong",[t._v("队列")]),t._v("和"),a("strong",[t._v("消息")]),t._v("都"),a("strong",[t._v("持久化")]),t._v("的方式，让消息必须保存在磁盘中，这样消息才会在重启之后仍然存在。但是，即使是保存到磁盘的消息，在内存中也会保留一份备份，以便将消息更快地发给消费者。这样就带来了较大且不稳定的内存消耗。如果希望消息直接被保存到磁盘中，可以设置队列为种"),a("strong",[t._v("惰性队列")]),t._v("。")]),t._v(" "),a("p",[t._v("RabbitMQ 的消息以队列维度存储，会随着系统的负载而在几种不同的存储状态中不断地流动。大致会经过从内存到磁盘再到内存的流程。")]),t._v(" "),a("p",[t._v("本文将介绍 RabbitMQ 消息的存储机制。")]),t._v(" "),a("h2",{attrs:{id:"_2-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-概述"}},[t._v("#")]),t._v(" 2. 概述")]),t._v(" "),a("h3",{attrs:{id:"_2-1-持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-持久化"}},[t._v("#")]),t._v(" 2.1 持久化")]),t._v(" "),a("p",[t._v("持久化指的是数据保存在磁盘中，以防止异常关机、重启等情况下的数据丢失。\n与存储相关的持久化包括队列的持久化和消息的持久化。")]),t._v(" "),a("h4",{attrs:{id:"_2-1-1-队列持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-队列持久化"}},[t._v("#")]),t._v(" 2.1.1 队列持久化")]),t._v(" "),a("p",[t._v("通过将队列的 durable 属性设置为 true 的方式可以将队列设置为持久化。")]),t._v(" "),a("p",[t._v("队列持久化仅仅指的是队列元数据持久化，即重启之后该队列还会存在，但"),a("strong",[t._v("队列中的消息会消失")]),t._v("。")]),t._v(" "),a("p",[t._v("如果队列为非持久化，则重启之后队列也会消失。")]),t._v(" "),a("h4",{attrs:{id:"_2-1-2-消息的持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-消息的持久化"}},[t._v("#")]),t._v(" 2.1.2 消息的持久化")]),t._v(" "),a("p",[t._v("通过发送时设置消息的 "),a("code",[t._v("BasicProperties#deliveryMode")]),t._v(" 的方式可以将消息设置为持久化的。")]),t._v(" "),a("p",[t._v("只有将消息和队列都设置为持久化之后，消息才会在重启之后仍然存在。")]),t._v(" "),a("h3",{attrs:{id:"_2-2-存储机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-存储机制"}},[t._v("#")]),t._v(" 2.2 存储机制")]),t._v(" "),a("h4",{attrs:{id:"_2-2-1-存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-存储结构"}},[t._v("#")]),t._v(" 2.2.1 存储结构")]),t._v(" "),a("p",[t._v("RabbitMQ 的存储可以被分为两个部分：队列索引和消息存储。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202206101450602.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("队列索引（rabbit_queue_index）：每个队列单独存储。负责维护队列中落盘消息的信息，包括消息的存储地点、是否已被交付给消费者、是否已被消费者 ack 等。")]),t._v(" "),a("li",[t._v("消息存储（rabbit_msg_store）：每个 Broker 只有一个，所有队列共同使用。以键值对的形式存储消息。RabbitMQ 将持久化和非持久化的消息在磁盘中区分存储。\n"),a("ul",[a("li",[t._v("非持久化消息存储（msg_store_transient）：重启后清空")]),t._v(" "),a("li",[t._v("持久化消息存储（msg_store_persistent）：重启后不会清空")])])])]),t._v(" "),a("p",[t._v("在消费消息时，会先查询队列索引，查询到消息在存储中的位置，然后再从消息存储中查询具体的消息。这样就会经历 2 次查询。为了优化消费性能，RabbitMQ 会将较小的消息体直接全量保存到队列索引，而不保存到消息存储中。较大的消息会保存在消息存储中，在队列索引中建立消息索引。这样在消费较小的消息时只需要查询 1 次。")]),t._v(" "),a("p",[t._v("可以通过配置 "),a("code",[t._v("queue_index_embed_msgs_below")]),t._v(" 的方式来指定消息整体大小小于某个值时会只保存到队列索引中。该值默认为 "),a("code",[t._v("4096")]),t._v("（byte）。")]),t._v(" "),a("h4",{attrs:{id:"_2-2-2-合并机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-合并机制"}},[t._v("#")]),t._v(" 2.2.2 合并机制")]),t._v(" "),a("p",[t._v("消息被消费后会被删除。删除消息时并不会直接删除消息所在的文件，而是先标记该消息为垃圾数据。当一个文件中都是垃圾数据是可以将这个文件删除。当检测到前后两个文件中的有效数据可以合并成一个文件，并且（垃圾数据大小/所有文件数据大小）的值超过 "),a("code",[t._v("garbage_fraction")]),t._v("（默认 0.5）时会触发垃圾回收，将这两个文件合并。这两个文件一定是逻辑上相邻的两个文件。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202206101514907.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_2-3-队列结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-队列结构"}},[t._v("#")]),t._v(" 2.3 队列结构")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202206101535209.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("在RabbitMQ中，队列 主要由两部分组成\n"),a("ul",[a("li",[a("code",[t._v("AMQPQueue")]),t._v("：实现AMQP协议的逻辑功能，包括接收消息，投递消息，Confirm消息等；")]),t._v(" "),a("li",[a("code",[t._v("BackingQueue")]),t._v("：提供AMQQueue调用的接口，完成消息的存储和持久化工作")])])])]),t._v(" "),a("h2",{attrs:{id:"rabbitmq中队列的存储状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq中队列的存储状态"}},[t._v("#")]),t._v(" RabbitMQ中队列的存储状态")]),t._v(" "),a("p",[t._v("BackingQueue由Q1,Q2,Delta,Q3,Q4五个子队列构成，在BackingQueue中，消息的生命周期有4个状态：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("queue")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("state\\store")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("message itself")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("message index(message position)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("q1,q4")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("alpha")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("RAM")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("RAM")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("q2,q3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("beta")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("DISK")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("RAM")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("q2,q3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("gamma")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("DISK")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("RAM&DISK")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("delta")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("delta")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("DISK")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("DISK")])])])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("alpha")]),t._v(": 消息的内容和消息索引都在RAM中。（Q1，Q4）")]),t._v(" "),a("li",[a("code",[t._v("beta")]),t._v(": 消息的内容保存在Disk上，消息索引保存在RAM中。（Q2，Q3）")]),t._v(" "),a("li",[a("code",[t._v("gamma")]),t._v(": 消息的内容保存在Disk上，消息索引在DISK和RAM上都有。（Q2，Q3）")]),t._v(" "),a("li",[a("code",[t._v("delta")]),t._v(": 消息内容和索引都在Disk上。(Delta）")])]),t._v(" "),a("blockquote",[a("p",[t._v("5个内部队列")]),t._v(" "),a("ul",[a("li",[t._v("q1和q4队列中只有alpha状态的消息；")]),t._v(" "),a("li",[t._v("q2和q3包含beta和gamma状态的消息；")]),t._v(" "),a("li",[t._v("delta队列是消息按序存盘后的一种逻辑队列，只有delta状态的消息。所以delta队列并不在内存中，其他4个队列则是由erlang queue模块实现。")])])]),t._v(" "),a("p",[t._v("这里以持久化消息为例（可以看到非持久化消息的生命周期会简单很多），从Q1到Q4，消息实际经历了一个"),a("code",[t._v("RAM->DISK->RAM")]),t._v("这样的过程，\nBackingQueue的设计有点类似于Linux的虚拟内存"),a("code",[t._v("Swap")]),t._v("区，")]),t._v(" "),a("ul",[a("li",[t._v("当队列"),a("code",[t._v("负载很高")]),t._v("时，通过将部分消息放到磁盘上来"),a("code",[t._v("·")]),t._v("节省内存空间`，")]),t._v(" "),a("li",[t._v("当"),a("code",[t._v("负载降低")]),t._v("时，消息又从磁盘回到内存中，让整个队列有很好的"),a("code",[t._v("弹性")]),t._v("。\n因此触发消息流动的主要因素是：")])]),t._v(" "),a("ol",[a("li",[a("code",[t._v("消息被消费")]),t._v("；")]),t._v(" "),a("li",[a("code",[t._v("内存不足")]),t._v("。")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("RabbitMQ会根据"),a("code",[t._v("消息的传输速度")]),t._v("来计算当前"),a("code",[t._v("内存中允许保存的最大消息数量")]),t._v("（Traget_RAM_Count），")])]),t._v(" "),a("li",[a("p",[t._v("当"),a("code",[t._v("内存中保存的消息数量 + 等待ACK的消息数量 > Target_RAM_Count")]),t._v("时，RabbitMQ才会把消息"),a("code",[t._v("写到磁盘")]),t._v("上，")])]),t._v(" "),a("li",[a("p",[t._v("所以说虽然理论上消息会按照"),a("code",[t._v("Q1->Q2->Delta->Q3->Q4")]),t._v("的顺序流动，但是并不是每条消息都会经历所有的子队列以及对应的生命周期。")])]),t._v(" "),a("li",[a("p",[t._v("从RabbitMQ的Backing Queue结构来看，当"),a("code",[t._v("内存不足")]),t._v("时，消息要经历多个生命周期，在Disk和RAM之间置换，这实际会"),a("code",[t._v("降低RabbitMQ的处理性能")]),t._v("（后续的流控就是关联的解决方法）。")])]),t._v(" "),a("li",[a("p",[t._v("对于持久化消息，RabbitMQ先将消息的内容和索引保存在磁盘中，然后才处于上面的某种状态（即只可能处于"),a("code",[t._v("alpha、gamma、delta")]),t._v("三种状态之一）。")]),t._v(" "),a("blockquote",[a("p",[t._v("the term "),a("code",[t._v("gamma")]),t._v(" seldom appears.")])])])]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://blog.csdn.net/wangyiyungw/article/details/80610699",target:"_blank",rel:"noopener noreferrer"}},[t._v("【RabbitMQ学习记录】- 消息队列存储机制源码分析"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://geosmart.github.io/2019/11/11/RabbitMQ%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99%E8%BF%87%E7%A8%8B/",target:"_blank",rel:"noopener noreferrer"}},[t._v("RabbitMQ数据读写过程"),a("OutboundLink")],1)])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:""}})])])}),[],!1,null,null,null);_.default=v.exports}}]);