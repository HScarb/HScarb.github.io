(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{630:function(t,r,a){"use strict";a.r(r);var e=a(17),_=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"rocketmq-消息消费设计和原理详解-源码解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-消息消费设计和原理详解-源码解析"}},[t._v("#")]),t._v(" RocketMQ 消息消费设计和原理详解 源码解析")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#rocketmq-消息消费设计和原理详解-源码解析"}},[t._v("RocketMQ 消息消费设计和原理详解 源码解析")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-背景"}},[t._v("1. 背景")])]),a("li",[a("a",{attrs:{href:"#_2-概述"}},[t._v("2. 概述")]),a("ul",[a("li",[a("a",{attrs:{href:"#_2-1-消费组概念与消费模式"}},[t._v("2.1 消费组概念与消费模式")]),a("ul",[a("li",[a("a",{attrs:{href:"#_2-1-1-消费组"}},[t._v("2.1.1 消费组")])]),a("li",[a("a",{attrs:{href:"#_2-1-2-广播消费模式"}},[t._v("2.1.2 广播消费模式")])]),a("li",[a("a",{attrs:{href:"#_2-1-3-集群消费模式"}},[t._v("2.1.3 集群消费模式")])])])]),a("li",[a("a",{attrs:{href:"#_2-2-消息消费形式"}},[t._v("2.2 消息消费形式")]),a("ul",[a("li",[a("a",{attrs:{href:"#_2-2-1-pull"}},[t._v("2.2.1 Pull")])]),a("li",[a("a",{attrs:{href:"#_2-2-2-push"}},[t._v("2.2.2 Push")])]),a("li",[a("a",{attrs:{href:"#_2-2-3-pop"}},[t._v("2.2.3 Pop")])])])]),a("li",[a("a",{attrs:{href:"#_2-3-消费端高可靠"}},[t._v("2.3 消费端高可靠")]),a("ul",[a("li",[a("a",{attrs:{href:"#_2-3-1-重试-死信机制"}},[t._v("2.3.1 重试-死信机制")])]),a("li",[a("a",{attrs:{href:"#_2-3-2-队列负载机制与重平衡"}},[t._v("2.3.2 队列负载机制与重平衡")])])])]),a("li",[a("a",{attrs:{href:"#_2-4-并发消费与顺序消费"}},[t._v("2.4 并发消费与顺序消费")])]),a("li",[a("a",{attrs:{href:"#_2-5-消费进度处理和反馈机制"}},[t._v("2.5 消费进度处理和反馈机制")])]),a("li",[a("a",{attrs:{href:"#_2-6-消息消费概要流程"}},[t._v("2.6 消息消费概要流程")])])])]),a("li",[a("a",{attrs:{href:"#_3-详细设计"}},[t._v("3. 详细设计")])]),a("li",[a("a",{attrs:{href:"#_4-源码解析"}},[t._v("4. 源码解析")])]),a("li",[a("a",{attrs:{href:"#参考资料"}},[t._v("参考资料")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"_1-背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-背景"}},[t._v("#")]),t._v(" 1. 背景")]),t._v(" "),a("h2",{attrs:{id:"_2-概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-概述"}},[t._v("#")]),t._v(" 2. 概述")]),t._v(" "),a("h3",{attrs:{id:"_2-1-消费组概念与消费模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-消费组概念与消费模式"}},[t._v("#")]),t._v(" 2.1 消费组概念与消费模式")]),t._v(" "),a("p",[t._v("和大多数消息队列一样，RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。在了解它们之前，需要先引入消费组的概念。")]),t._v(" "),a("h4",{attrs:{id:"_2-1-1-消费组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-消费组"}},[t._v("#")]),t._v(" 2.1.1 消费组")]),t._v(" "),a("p",[t._v("一个消费者实例即是一个消费者进程，负责消费消息。")]),t._v(" "),a("p",[t._v("消费组是一个逻辑概念，它包含了多个同一类的消费者实例，通常这些消费者都消费同一类消息（都消费相同的 Topic）且消费逻辑一致。")]),t._v(" "),a("p",[t._v("消费组的引入是用来在消费消息时更好地进行负载均衡和容错。")]),t._v(" "),a("h4",{attrs:{id:"_2-1-2-广播消费模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-广播消费模式"}},[t._v("#")]),t._v(" 2.1.2 广播消费模式")]),t._v(" "),a("p",[t._v("广播消费模式即全部的消息会广播分发到所有的消费者实例，每个消费者实例会收到全量的消息（即便消费组中有多个消费者都订阅同一 Topic）。")]),t._v(" "),a("p",[t._v("如下图所示，生产者发送了 5 条消息，每个消费组中的消费者都收到全部的 5 条消息。")]),t._v(" "),a("p",[t._v("广播模式使用较少，适合各个消费者都需要通知的场景，如刷新应用中的缓存。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/07/1658682241264.png",alt:"广播消费模式"}})]),t._v(" "),a("blockquote",[a("p",[t._v("注意事项：")]),t._v(" "),a("ol",[a("li",[t._v("广播消费模式下不支持 "),a("strong",[t._v("顺序消息")]),t._v("。")]),t._v(" "),a("li",[t._v("广播消费模式下不支持 "),a("strong",[t._v("重置消费位点")]),t._v("。")]),t._v(" "),a("li",[t._v("每条消息都需要"),a("strong",[t._v("被相同订阅逻辑的多台机器处理")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("消费进度在客户端维护")]),t._v("，出现重复消费的概率稍大于集群模式。如果消费进度文件丢失，存在消息丢失的可能。")]),t._v(" "),a("li",[t._v("广播模式下，消息队列 RocketMQ 版保证每条消息至少被每台客户端消费一次，但是并"),a("strong",[t._v("不会重投消费失败的消息")]),t._v("，因此业务方需要关注消费失败的情况。")]),t._v(" "),a("li",[t._v("广播模式下，"),a("strong",[t._v("客户端每一次重启都会从最新消息消费")]),t._v("。客户端在被停止期间发送至服务端的消息将会被自动跳过，请谨慎选择。")]),t._v(" "),a("li",[t._v("广播模式下，每条消息都会被大量的客户端重复处理，因此推荐尽可能使用集群模式。")]),t._v(" "),a("li",[t._v("广播模式下服务端不维护消费进度，所以消息队列 RocketMQ 版控制台不支持消息堆积查询、消息堆积报警和订阅关系查询功能。")])])]),t._v(" "),a("h4",{attrs:{id:"_2-1-3-集群消费模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-集群消费模式"}},[t._v("#")]),t._v(" 2.1.3 集群消费模式")]),t._v(" "),a("p",[t._v("集群消费模式下，同一 Topic 下的一条消息只会被同一消费组中的一个消费者消费。集群消费模式下，消息被负载均衡到了同一个消费组的多个消费者实例上。")]),t._v(" "),a("p",[t._v("更具体一点，在同一消费组中的不同消费者会根据负载机制来平均地订阅 Topic 中的每个 Queue。（默认的 AVG 负载方式）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/07/1658682241525.png",alt:"广播消费模式"}})]),t._v(" "),a("p",[t._v("RocketMQ 默认使用集群消费模式，这也是大部分场景下会使用到的消费模式。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("不同模式下消费进度保存方式的不同：")]),t._v(" "),a("ol",[a("li",[t._v("广播模式：广播模式由于每个消费者都需要消费消息，RocketMQ 使 用 "),a("code",[t._v("LocalfileOffsetStore")]),t._v("，把 Offset存到本地。")]),t._v(" "),a("li",[t._v("集群模式：由于集群中的消费者只要一个消费消息即可，故消息的消费进度需要统一保存。RocketMQ 保存在 Broker，通过 "),a("code",[t._v("RemoteBrokerOffsetStore")]),t._v(" 存储。")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-消息消费形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-消息消费形式"}},[t._v("#")]),t._v(" 2.2 消息消费形式")]),t._v(" "),a("h4",{attrs:{id:"_2-2-1-pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-pull"}},[t._v("#")]),t._v(" 2.2.1 Pull")]),t._v(" "),a("p",[t._v("指消费者主动拉取消息进行消费，主动从 Broker 拉取消息，主动权由消费者应用控制。")]),t._v(" "),a("h4",{attrs:{id:"_2-2-2-push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-push"}},[t._v("#")]),t._v(" 2.2.2 Push")]),t._v(" "),a("p",[t._v("指 Broker 主动将消息 Push 给消费者，Broker 收到消息就会主动推送到消费者端。该模式的消费实时性较高。")]),t._v(" "),a("p",[t._v("消费者组中的消费者实例会根据预设的负载均衡算法对 Topic 中的 Queue 进行均匀的订阅，每个 Queue 最多只能被一个消费者订阅。")]),t._v(" "),a("p",[t._v("在 RocketMQ 中，Push 消费实际也是由 Pull 消费（拉取）实现。Push 消费只是通过客户端 API 层面的封装让用户感觉像是 Broker 在推送消息给消费者。")]),t._v(" "),a("h4",{attrs:{id:"_2-2-3-pop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-pop"}},[t._v("#")]),t._v(" 2.2.3 Pop")]),t._v(" "),a("p",[t._v("RocketMQ 5.0 引入的新消费形式。")]),t._v(" "),a("p",[t._v("Push 模式在一些情况下存在一定缺陷：")]),t._v(" "),a("ul",[a("li",[t._v("富客户端：客户端逻辑比较重，多语言支持不友好")]),t._v(" "),a("li",[t._v("队列独占：Topic 中的一个 Queue 最多只能被 1 个 Push 消费者消费，消费者数量无法无限扩展")])]),t._v(" "),a("h3",{attrs:{id:"_2-3-消费端高可靠"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-消费端高可靠"}},[t._v("#")]),t._v(" 2.3 消费端高可靠")]),t._v(" "),a("h4",{attrs:{id:"_2-3-1-重试-死信机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-重试-死信机制"}},[t._v("#")]),t._v(" 2.3.1 重试-死信机制")]),t._v(" "),a("p",[t._v("在实际使用中，消息的消费可能出现失败。RocketMQ 拥有重试机制和死信机制来保证消息消费的可靠性。")]),t._v(" "),a("ol",[a("li",[t._v("正常消费：消费成功则提交消费位点")]),t._v(" "),a("li",[t._v("重试机制：如果正常消费失败，消息会被放入重试 Topic "),a("code",[t._v("%RETRY%消费者组")]),t._v("，最多重试消费 16 次，重试的时间间隔逐渐变长。（消费者组会自动订阅重试 Topic）")]),t._v(" "),a("li",[t._v("死信机制：如果正常消费和重试 16 次均失败，消息会保存到死信 Topic "),a("code",[t._v("%DLQ%消费者组")]),t._v(" 中，此时需人工介入处理")])]),t._v(" "),a("h4",{attrs:{id:"_2-3-2-队列负载机制与重平衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-队列负载机制与重平衡"}},[t._v("#")]),t._v(" 2.3.2 队列负载机制与重平衡")]),t._v(" "),a("h3",{attrs:{id:"_2-4-并发消费与顺序消费"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-并发消费与顺序消费"}},[t._v("#")]),t._v(" 2.4 并发消费与顺序消费")]),t._v(" "),a("h3",{attrs:{id:"_2-5-消费进度处理和反馈机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-消费进度处理和反馈机制"}},[t._v("#")]),t._v(" 2.5 消费进度处理和反馈机制")]),t._v(" "),a("h3",{attrs:{id:"_2-6-消息消费概要流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-消息消费概要流程"}},[t._v("#")]),t._v(" 2.6 消息消费概要流程")]),t._v(" "),a("h2",{attrs:{id:"_3-详细设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-详细设计"}},[t._v("#")]),t._v(" 3. 详细设计")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/07/1658682241560.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_4-源码解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-源码解析"}},[t._v("#")]),t._v(" 4. 源码解析")]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/apache/rocketmq/blob/master/docs/cn/design.md#42-consumer%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档——设计"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/RocketMQ%20%E5%AE%9E%E6%88%98%E4%B8%8E%E8%BF%9B%E9%98%B6%EF%BC%88%E5%AE%8C%EF%BC%89/08%20%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%20API%20%E4%B8%8E%E7%89%88%E6%9C%AC%E5%8F%98%E8%BF%81%E8%AF%B4%E6%98%8E.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("RocketMQ 实战与进阶——丁威"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.baiyp.ren/RocketMQ%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RocketMQ消费消息——白云鹏"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/f071d5069059",target:"_blank",rel:"noopener noreferrer"}},[t._v("消息中间件—RocketMQ消息消费（一）——癫狂侠"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://kunzhao.org/docs/rocketmq/rocketmq-message-receive-flow/",target:"_blank",rel:"noopener noreferrer"}},[t._v("RocketMQ 消息接受流程——赵坤"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/360911990",target:"_blank",rel:"noopener noreferrer"}},[t._v("RocketMQ 消息消费——贝贝猫"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.aliyun.com/article/801815",target:"_blank",rel:"noopener noreferrer"}},[t._v("RocketMQ 5.0 POP 消费模式探秘"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/4757079f871f",target:"_blank",rel:"noopener noreferrer"}},[t._v("RocketMQ消息消费源码分析"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/daimingbao/article/details/120231289",target:"_blank",rel:"noopener noreferrer"}},[t._v("Rocketmq消费消息原理——服务端技术栈"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://47.100.139.123/blog/article/89",target:"_blank",rel:"noopener noreferrer"}},[t._v("RocketMQ——4. Consumer 消费消息——Kong"),a("OutboundLink")],1)])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:""}})])])}),[],!1,null,null,null);r.default=_.exports}}]);