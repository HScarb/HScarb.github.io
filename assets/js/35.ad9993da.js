(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{624:function(_,e,r){"use strict";r.r(e);var t=r(17),v=Object(t.a)({},(function(){var _=this,e=_.$createElement,r=_._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[r("h1",{attrs:{id:"rocketmq-消息发送设计和原理详解-源码剖析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq-消息发送设计和原理详解-源码剖析"}},[_._v("#")]),_._v(" RocketMQ 消息发送设计和原理详解 源码剖析")]),_._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#rocketmq-消息发送设计和原理详解-源码剖析"}},[_._v("RocketMQ 消息发送设计和原理详解 源码剖析")]),r("ul",[r("li",[r("a",{attrs:{href:"#_1-背景"}},[_._v("1. 背景")])]),r("li",[r("a",{attrs:{href:"#_2-概述"}},[_._v("2. 概述")]),r("ul",[r("li",[r("a",{attrs:{href:"#_2-1-消息发送方式和特殊消息"}},[_._v("2.1 消息发送方式和特殊消息")]),r("ul",[r("li",[r("a",{attrs:{href:"#_2-1-1-三种消息发送方式"}},[_._v("2.1.1 三种消息发送方式")])]),r("li",[r("a",{attrs:{href:"#_2-1-2-特殊消息类型"}},[_._v("2.1.2 特殊消息类型")])])])]),r("li",[r("a",{attrs:{href:"#_2-2-路由机制"}},[_._v("2.2 路由机制")])]),r("li",[r("a",{attrs:{href:"#_2-3-消息发送流程"}},[_._v("2.3 消息发送流程")])]),r("li",[r("a",{attrs:{href:"#_2-4-高可用设计"}},[_._v("2.4 高可用设计")]),r("ul",[r("li",[r("a",{attrs:{href:"#_2-4-1-生产者高可用"}},[_._v("2.4.1 生产者高可用")])]),r("li",[r("a",{attrs:{href:"#_2-4-2-broker-端高可用"}},[_._v("2.4.2 Broker 端高可用")])])])])])]),r("li",[r("a",{attrs:{href:"#_3-详细设计"}},[_._v("3. 详细设计")]),r("ul",[r("li",[r("a",{attrs:{href:"#_3-1-消息"}},[_._v("3.1 消息")])]),r("li",[r("a",{attrs:{href:"#_3-2-生产者类图"}},[_._v("3.2 生产者类图")])]),r("li",[r("a",{attrs:{href:"#_3-3-生产者启动"}},[_._v("3.3 生产者启动")])]),r("li",[r("a",{attrs:{href:"#_3-4-消息发送"}},[_._v("3.4 消息发送")]),r("ul",[r("li",[r("a",{attrs:{href:"#_3-4-1-查找-topic-路由信息"}},[_._v("3.4.1 查找 Topic 路由信息")])]),r("li",[r("a",{attrs:{href:"#_3-4-2-选择消息队列"}},[_._v("3.4.2 选择消息队列")])]),r("li",[r("a",{attrs:{href:"#_3-4-3-发送消息"}},[_._v("3.4.3 发送消息")])])])])])]),r("li",[r("a",{attrs:{href:"#_4-源码解析"}},[_._v("4. 源码解析")])]),r("li",[r("a",{attrs:{href:"#参考资料"}},[_._v("参考资料")])])])])])]),r("p"),_._v(" "),r("h2",{attrs:{id:"_1-背景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-背景"}},[_._v("#")]),_._v(" 1. 背景")]),_._v(" "),r("p",[_._v("发送消息是 MQ 最基础的操作之一。RocketMQ 官方提供了多语言客户端支持消息的发送和消费操作。\n当然，消息发送并不仅仅牵扯到客户端操作。客户端做的是向 Broker 发送请求，请求中包含了消息的全部信息。而 Broker 需要处理客户端发送来的生产请求，将消息存储起来。\n在这篇文章中我将将解析消息发送流程中生产者和 Broker 的处理流程，揭秘 RocketMQ 消息发送高性能、高可靠的原理。")]),_._v(" "),r("h2",{attrs:{id:"_2-概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-概述"}},[_._v("#")]),_._v(" 2. 概述")]),_._v(" "),r("p",[_._v("RocketMQ 的 Java 客户端提供了丰富的消息发送 API，支持多种消息发送的方式和特殊消息的发送。\n包括 3 种发送方式（同步、异步、单向）和多种特殊消息（顺序消息、延时消息、批量消息、过滤消息、事务消息）。\n对于客户端消息发送 API 的具体使用方式，可以参考官方文档："),r("a",{attrs:{href:"https://github.com/apache/rocketmq/blob/develop/docs/cn/RocketMQ_Example.md",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://github.com/apache/rocketmq/blob/develop/docs/cn/RocketMQ_Example.md"),r("OutboundLink")],1),_._v("。")]),_._v(" "),r("h3",{attrs:{id:"_2-1-消息发送方式和特殊消息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-消息发送方式和特殊消息"}},[_._v("#")]),_._v(" 2.1 消息发送方式和特殊消息")]),_._v(" "),r("h4",{attrs:{id:"_2-1-1-三种消息发送方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-三种消息发送方式"}},[_._v("#")]),_._v(" 2.1.1 三种消息发送方式")]),_._v(" "),r("p",[_._v("RocketMQ 支持 3 种消息发送方式：同步、异步和单向。")]),_._v(" "),r("ol",[r("li",[_._v("同步（Sync）\n"),r("ul",[r("li",[_._v("发送消息时，同步等待，直到 Broker 返回发送结果。")]),_._v(" "),r("li",[_._v("这种方式最为可靠，但是发送性能最差。")]),_._v(" "),r("li",[_._v("在一些可靠性要求非常高的场景下，推荐使用同步方式。比如：重要的消息通知，短信通知。")])])]),_._v(" "),r("li",[_._v("异步（Async）\n"),r("ul",[r("li",[_._v("发送消息时，无需等待 Broker 返回发送结果，发送线程不阻塞。执行发送 API 时指定消息发送成功后的回调函数。")]),_._v(" "),r("li",[_._v("这种方式相比于同步发送，性能可以提升多个数量级，但可靠性不如同步发送。")]),_._v(" "),r("li",[_._v("在对响应时间敏感、流量较大的场景下，推荐使用异步方式。异步发送是使用最广泛的发送方式。")])])]),_._v(" "),r("li",[_._v("单向（One-way）\n"),r("ul",[r("li",[_._v("发送消息时，直接返回，不等待 Broker 返回发送结果，也不注册回调函数。")]),_._v(" "),r("li",[_._v("这种发送方式性能最高，可靠性最差。它不关心发送结果，不在乎消息是否成功存储在 Broker 中。")]),_._v(" "),r("li",[_._v("适用于消息丢失也没有太大影响的场景，例如发送日志。")])])])]),_._v(" "),r("p",[_._v("这三种发送方式中，异步发送是最为广泛使用的发送方式。配合一些重试和补偿机制，可以达成较高的可靠性和很高的性能。")]),_._v(" "),r("h4",{attrs:{id:"_2-1-2-特殊消息类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-特殊消息类型"}},[_._v("#")]),_._v(" 2.1.2 特殊消息类型")]),_._v(" "),r("p",[_._v("下面简单介绍一下几种特殊消息类型。")]),_._v(" "),r("ol",[r("li",[_._v("普通消息：发送效率最高、使用场景最广泛的消息类型。普通消息可以由客户端并发发送。不保证普通消息消费的顺序。单 Broker 性能可以达到十万级别。（视 Broker 配置而变）")]),_._v(" "),r("li",[_._v("队列级别顺序消息：RocketMQ 将一个 Topic 分为多个队列，以提高消费速度。每隔分区内的消息遵循先生产先消费的顺序。")]),_._v(" "),r("li",[_._v("Topic 级别顺序消息：如果把一个 Topic 的队列数量设为 1，那么该 Topic 中的消息也遵循先生产先消费。")]),_._v(" "),r("li",[_._v("延迟消息：消息发送后，消费者并不马上收到消息，而是等待一段指定的时间之后才能消费到该消息。")]),_._v(" "),r("li",[_._v("事务消息：提供分布式事务功能，可以保证发送消息和另外的操作同时成功或者同时失败。")]),_._v(" "),r("li",[_._v("批量消息：将多个消息包装成一个批量消息，一起发送。降低网络传输次数，提升传输效率。")])]),_._v(" "),r("h3",{attrs:{id:"_2-2-路由机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-路由机制"}},[_._v("#")]),_._v(" 2.2 路由机制")]),_._v(" "),r("p",[_._v("RocketMQ 的 Topic 可以分为多个队列，每个队列可能分布在不同 Broker 上。")]),_._v(" "),r("p",[_._v("消息的路由指的是发送消息时需要先获取 Topic 的路由信息（其中包含每个 Topic 的队列和它们所在的 Broker 地址），然后选择一个队列进行发送。")]),_._v(" "),r("p",[_._v("消息发送的 API 提供了参数，可以传入要发送的队列信息，或者传入队列选择方法。")]),_._v(" "),r("h3",{attrs:{id:"_2-3-消息发送流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-消息发送流程"}},[_._v("#")]),_._v(" 2.3 消息发送流程")]),_._v(" "),r("p",[_._v("消息发送的流程涉及到 RocketMQ 的三个组件：生产者、Broker、NameServer。\n其中生产者负责发送消息，Broker 负责处理消息发送请求，NameServer 负责更新和提供路由信息。")]),_._v(" "),r("p",[r("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778577.png",alt:""}})]),_._v(" "),r("p",[_._v("如图所示")]),_._v(" "),r("ul",[r("li",[_._v("生产者每 30 秒向 NameServer 拉取路由信息，Broker 每 30 秒向 NameServer 发送路由信息。")]),_._v(" "),r("li",[_._v("生产者发送消息时，会先在本地查询 Topic 路由信息。")]),_._v(" "),r("li",[_._v("如果查询不到，会请求 NameServer 查询。")]),_._v(" "),r("li",[_._v("随后将消息发送给 Broker。")]),_._v(" "),r("li",[_._v("Broker 也会在本地查询 Topic 路由信息来检查消息的 Topic 是否存在。")]),_._v(" "),r("li",[_._v("随后保存消息，如果是异步发送则直接返回，如果同步发送则等待消息保存成功后返回。")])]),_._v(" "),r("h3",{attrs:{id:"_2-4-高可用设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-高可用设计"}},[_._v("#")]),_._v(" 2.4 高可用设计")]),_._v(" "),r("h4",{attrs:{id:"_2-4-1-生产者高可用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-生产者高可用"}},[_._v("#")]),_._v(" 2.4.1 生产者高可用")]),_._v(" "),r("ul",[r("li",[_._v("消息发送重试机制：生产者在消息发送时如果出现失败，默认会重试 2 次。")]),_._v(" "),r("li",[_._v("故障规避机制：如果重试的消息仍发往同一个 Broker，发送大概率还是会失败，所以在重试时会尽量避开刚刚发送失败的 Broker。")])]),_._v(" "),r("h4",{attrs:{id:"_2-4-2-broker-端高可用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-broker-端高可用"}},[_._v("#")]),_._v(" 2.4.2 Broker 端高可用")]),_._v(" "),r("p",[_._v("Broker 端的高可用是用数据同步的方式，将消息同步到备 Broker 上，当主 Broker 发生故障时，可以从备 Broker 上恢复数据。")]),_._v(" "),r("h2",{attrs:{id:"_3-详细设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-详细设计"}},[_._v("#")]),_._v(" 3. 详细设计")]),_._v(" "),r("h3",{attrs:{id:"_3-1-消息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-消息"}},[_._v("#")]),_._v(" 3.1 消息")]),_._v(" "),r("p",[r("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778594.png",alt:""}})]),_._v(" "),r("p",[_._v("RocketMQ 中的消息类主要有 3 个")]),_._v(" "),r("ul",[r("li",[r("code",[_._v("Message")]),_._v(" 为客户端需要使用的消息类。")]),_._v(" "),r("li",[r("code",[_._v("MessageExt")]),_._v(" 为消息扩展属性类，它扩展了 "),r("code",[_._v("Message")]),_._v("，在 Broker 上产生此对象。")]),_._v(" "),r("li",[r("code",[_._v("MessageExtBrokerInner")]),_._v(" 是存储内部使用的 Message 对象，在 rocketmq-store 模块使用。")])]),_._v(" "),r("p",[_._v("在发送消息时，用到的是 "),r("code",[_._v("Message")]),_._v("，可以指定消息的属性、消息体和 flag。")]),_._v(" "),r("h3",{attrs:{id:"_3-2-生产者类图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-生产者类图"}},[_._v("#")]),_._v(" 3.2 生产者类图")]),_._v(" "),r("p",[r("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778622.png",alt:""}})]),_._v(" "),r("ul",[r("li",[r("code",[_._v("DefaultMQProducer")]),_._v(" 是 RocketMQ 中默认的生产者实现，它实现了 MQAdmin 接口。")]),_._v(" "),r("li",[r("code",[_._v("DefaultMQProducer")]),_._v(" 内部包装了一个 "),r("code",[_._v("DefaultMQProducerImpl")]),_._v(" 字段，它是生产者的具体实现类，"),r("code",[_._v("DefaultMQProducer")]),_._v(" 调用它内部的 "),r("code",[_._v("DefaultMQProducerImpl")]),_._v(" 来发送命令。")]),_._v(" "),r("li",[r("code",[_._v("DefaultMQProducerImpl")]),_._v(" 内部注册了一个 "),r("code",[_._v("MQClientInstance")]),_._v(" 字段。"),r("code",[_._v("MQClientInstance")]),_._v(" 是与 NameServer 和 Broker 通信的中介。 "),r("code",[_._v("MQClientInstance")]),_._v(" 与 "),r("code",[_._v("ClientId")]),_._v(" 一一对应，"),r("code",[_._v("ClientId")]),_._v(" 由 "),r("code",[_._v("clientIp")]),_._v("、"),r("code",[_._v("instanceName")]),_._v("、"),r("code",[_._v("unitName")]),_._v(" 组成。如果不手动修改，一般来说一个启动的客户端进程只有一个 "),r("code",[_._v("MQClientInstance")]),_._v(" 实例，这样可以节省客户端资源。")]),_._v(" "),r("li",[r("code",[_._v("MQClientInstnace")]),_._v(" 内部的 "),r("code",[_._v("producerTable")]),_._v(" 注册了 ClientId 和 "),r("code",[_._v("DefaultMQProducerImpl")]),_._v(" 的对应关系")]),_._v(" "),r("li",[r("code",[_._v("MQClientAPIImpl")]),_._v(" 提供了发送消息的 API，它调用 "),r("code",[_._v("RemotingClient")]),_._v(" 执行发送。")])]),_._v(" "),r("h3",{attrs:{id:"_3-3-生产者启动"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-生产者启动"}},[_._v("#")]),_._v(" 3.3 生产者启动")]),_._v(" "),r("p",[r("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778639.png",alt:""}})]),_._v(" "),r("ol",[r("li",[_._v("构造 "),r("code",[_._v("DefaultMQProducer")]),_._v(" 实例，"),r("code",[_._v("start()")]),_._v(" 启动")]),_._v(" "),r("li",[_._v("初始化 "),r("code",[_._v("DefaultMQProducerImpl")]),_._v("，设置状态为 "),r("code",[_._v("CREATE_JUST")])]),_._v(" "),r("li",[_._v("启动 "),r("code",[_._v("DefaultMQProducerImpl")])]),_._v(" "),r("li",[_._v("检查配置")]),_._v(" "),r("li",[_._v("根据 "),r("code",[_._v("ClientId")]),_._v(" 获取或创建 "),r("code",[_._v("MQClientInstance")])]),_._v(" "),r("li",[_._v("将 "),r("code",[_._v("DefaultMQProducerImpl")]),_._v(" 注册到 "),r("code",[_._v("MQClientInstance")])]),_._v(" "),r("li",[_._v("启动 "),r("code",[_._v("MQClientInstance")])]),_._v(" "),r("li",[_._v("启动定时任务，包括从 NameServer 拉取 Topic 路由信息、向 Broker 发送心跳")]),_._v(" "),r("li",[_._v("启动 "),r("code",[_._v("PullMessageService")])]),_._v(" "),r("li",[_._v("启动 "),r("code",[_._v("RebalanceService")])]),_._v(" "),r("li",[_._v("设置服务状态为 "),r("code",[_._v("RUNNING")])])]),_._v(" "),r("h3",{attrs:{id:"_3-4-消息发送"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-消息发送"}},[_._v("#")]),_._v(" 3.4 消息发送")]),_._v(" "),r("p",[_._v("RocketMQ 的消息发送流程图如下图所示：")]),_._v(" "),r("p",[r("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2022/06/1654958778665.png",alt:""}})]),_._v(" "),r("p",[_._v("其中 MQProducerImpl 负责执行核心的消息发送方法 "),r("code",[_._v("sendDefaultImpl")])]),_._v(" "),r("p",[_._v("这个方法中包含了消息发送的核心逻辑")]),_._v(" "),r("ol",[r("li",[_._v("查找 Topic 路由信息")]),_._v(" "),r("li",[_._v("选择消息队列")]),_._v(" "),r("li",[_._v("发送消息")])]),_._v(" "),r("h4",{attrs:{id:"_3-4-1-查找-topic-路由信息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-查找-topic-路由信息"}},[_._v("#")]),_._v(" 3.4.1 查找 Topic 路由信息")]),_._v(" "),r("p",[_._v("指定 Topic 发送消息后，生产者需要知道消息要发往哪个 Broker 地址。于是需要获取 Topic 路由信息，查询 Topic 所在的 Broker，随后选择一个 Broker 进行发送。该逻辑在 "),r("code",[_._v("DefaultMQProducerImpl#tryToFindTopicPublishInfo()")]),_._v(" 中执行。")]),_._v(" "),r("p",[_._v("在第一次发送消息时，本地没有缓存 Topic 路由信息，所以需要主动从 NameServer 拉取，然后更新到本地路由表缓存。随后生产者会启动定时任务，每隔 30s 重新从 NameServer 拉取路由信息。")]),_._v(" "),r("p",[_._v("注意，第一次查询 NameServer 时，如果没有拉取到 Topic 路由信息，则会使用默认 Topic（"),r("code",[_._v("AUTO_CREATE_TOPIC_KEY_TOPIC")]),_._v("）再次查询。")]),_._v(" "),r("blockquote",[r("p",[_._v("默认 Topic 在 Broker 启动时创建，是为自动创建主题运用的。\n它的目的是在主题没有被创建时，让生产者发送消息时也能够查询到 Broker 地址。\n然后等消息真正发送到 Broker 时，会根据消息的 Topic 创建主题。")])]),_._v(" "),r("p",[_._v("如果最终都没有拉取到 Topic 路由信息，则会抛出异常。")]),_._v(" "),r("h4",{attrs:{id:"_3-4-2-选择消息队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-选择消息队列"}},[_._v("#")]),_._v(" 3.4.2 选择消息队列")]),_._v(" "),r("p",[_._v("获取到 Topic 路由信息后，需要从中选择一个队列进行发送。")]),_._v(" "),r("h4",{attrs:{id:"_3-4-3-发送消息"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-3-发送消息"}},[_._v("#")]),_._v(" 3.4.3 发送消息")]),_._v(" "),r("h2",{attrs:{id:"_4-源码解析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-源码解析"}},[_._v("#")]),_._v(" 4. 源码解析")]),_._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/apache/rocketmq/blob/develop/docs/cn/RocketMQ_Example.md",target:"_blank",rel:"noopener noreferrer"}},[_._v("生产消息样例——官方文档"),r("OutboundLink")],1)]),_._v(" "),r("li",[r("a",{attrs:{href:"https://kunzhao.org/docs/rocketmq/rocketmq-send-message-flow/",target:"_blank",rel:"noopener noreferrer"}},[_._v("RocketMQ 消息发送流程"),r("OutboundLink")],1)]),_._v(" "),r("li",[_._v("《RocketMQ 技术内幕 第二版》")]),_._v(" "),r("li",[_._v("《RocketMQ 分布式消息中间件 核心原理与最佳实践》")])]),_._v(" "),r("hr"),_._v(" "),r("p",[_._v("欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！")]),_._v(" "),r("p",[r("img",{attrs:{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:""}})])])}),[],!1,null,null,null);e.default=v.exports}}]);