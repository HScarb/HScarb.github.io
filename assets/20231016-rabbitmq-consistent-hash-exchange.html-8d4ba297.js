import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as i,c as l,a as n,b as s,d as a,w as u,e as p}from"./app-e3bb0afd.js";const r={},k={href:"http://hscarb.github.io/rabbitmq/20231016-rabbitmq-consistent-hash-exchange.html",target:"_blank",rel:"noopener noreferrer"},d=p('<h1 id="rabbitmq-一致性哈希交换器-使用和原理" tabindex="-1"><a class="header-anchor" href="#rabbitmq-一致性哈希交换器-使用和原理" aria-hidden="true">#</a> RabbitMQ 一致性哈希交换器 使用和原理</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><h3 id="_1-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_1-1-使用场景" aria-hidden="true">#</a> 1.1 使用场景</h3><p>在使用 RabbitMQ 集群时，我们常常遇到队列中消息不平衡的场景。即某个队列的消息或流量非常大，其他队列流量较小。由于 RabbitMQ 的队列只能存在于一个节点，就会导致节点间负载不均衡。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2023/10/1697390228780.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',5),m={href:"https://www.cloudamqp.com/blog/part2-rabbitmq-best-practice-for-high-performance.html",target:"_blank",rel:"noopener noreferrer"},g=p(`<p>将一个队列拆分成多个队列也可以摆脱单队列的性能瓶颈，获得更高的吞吐量。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2023/10/1697390229000.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-2-一致性哈希" tabindex="-1"><a class="header-anchor" href="#_1-2-一致性哈希" aria-hidden="true">#</a> 1.2 一致性哈希</h3><p>一致性哈希交换器根据 routingKey 进行哈希，根据哈希结果将生产者发送的消息路由到哪个队列中。</p><p>普通的哈希算法无法保证在增加或者减少队列绑定时，同样的 routingKey 的消息路由到相同的队列。一致性哈希就是为了解决这个问题。</p><h2 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用" aria-hidden="true">#</a> 2. 使用</h2><h3 id="_2-1-开启插件" tabindex="-1"><a class="header-anchor" href="#_2-1-开启插件" aria-hidden="true">#</a> 2.1 开启插件</h3><p>需要先开启一致性哈希交换器插件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_consistent_hash_exchange
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-管理页面使用" tabindex="-1"><a class="header-anchor" href="#_2-2-管理页面使用" aria-hidden="true">#</a> 2.2 管理页面使用</h3><p>开启插件后，在 RabbitMQ 管理页面可以创建 <code>x-consistent-hash</code> 类型的交换器，即一致性哈希交换器。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202310170127665.png" alt="image-20231012004854125" tabindex="0" loading="lazy"><figcaption>image-20231012004854125</figcaption></figure><p>然后我们创建 3 个子队列</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202310170127984.png" alt="image-20231012004951406" tabindex="0" loading="lazy"><figcaption>image-20231012004951406</figcaption></figure><p>进入 exchange 详情，将 3 个队列与 exchange 绑定。</p><p>注意，这里的 Routing key 的含义是对应队列的权重，权重越高，消息路由到该队列的概率也越高。</p><p>这里我们将 3 个队列的权重都设为 10。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202310170128414.png" alt="image-20231012005239630" tabindex="0" loading="lazy"><figcaption>image-20231012005239630</figcaption></figure><p>然后在 exchange 详情页面，手动发送消息，指定不同的 Routing key，观察消息在队列中的分布。</p><p>这里我发送 9 条消息，Routing key 为 1~9。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202310170128490.png" alt="image-20231012005439516" tabindex="0" loading="lazy"><figcaption>image-20231012005439516</figcaption></figure><p>消息被分配到 3 个队列中。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202310170128450.png" alt="image-20231012005513363" tabindex="0" loading="lazy"><figcaption>image-20231012005513363</figcaption></figure><p>由于发送的消息较少，这里还不是非常平均。发送更多消息将会更平均。</p><p>如何查看内核中的权重是否生效？可以用命令行提供的诊断命令查看一致性哈希交换器的哈希环节点分布：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-diagnostics consistent_hash_exchange_ring_state <span class="token parameter variable">-p</span> <span class="token punctuation">{</span>vhost<span class="token punctuation">}</span> <span class="token punctuation">{</span>exhcange<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-3-java-sdk-使用" tabindex="-1"><a class="header-anchor" href="#_2-3-java-sdk-使用" aria-hidden="true">#</a> 2.3 Java SDK 使用</h3><p>下面以 Java SDK 为例，演示一致性哈希交换器的使用。先导入 maven 依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- RabbitMQ Java client --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.13.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeoutException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConsistentHashDemo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">EXCHANGE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;consistent_hash_exchange&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">QUEUE_NAMES</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;queue1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;queue2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;queue3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MESSAGE_COUNT</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">TimeoutException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 设置 rabbitmq 连接地址，如有必要，还需要设置端口（默认 5672）、用户名和密码</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// 定义交换器</span>
            channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span> <span class="token string">&quot;x-consistent-hash&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 定义 3 个子队列，并与交换器绑定</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> queueName <span class="token operator">:</span> <span class="token constant">QUEUE_NAMES</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span> <span class="token string">&quot;10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的 bindingKey 为路由到该队列消息的权重，用整数字符串表示</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 生产 300 条消息，</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MESSAGE_COUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;Message-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
                <span class="token class-name">String</span> routingKey <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用消息的序号作为 routingKey</span>
                channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Sent &quot;</span> <span class="token operator">+</span> <span class="token constant">MESSAGE_COUNT</span> <span class="token operator">+</span> <span class="token string">&quot; messages.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 打印每个队列堆积的消息数量</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> queueName <span class="token operator">:</span> <span class="token constant">QUEUE_NAMES</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> count <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">messageCount</span><span class="token punctuation">(</span>queueName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Queue &quot;</span> <span class="token operator">+</span> queueName <span class="token operator">+</span> <span class="token string">&quot; has &quot;</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">&quot; messages.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-高级用法" tabindex="-1"><a class="header-anchor" href="#_2-4-高级用法" aria-hidden="true">#</a> 2.4 高级用法</h3><h4 id="_2-4-1-使用-header-作为路由键" tabindex="-1"><a class="header-anchor" href="#_2-4-1-使用-header-作为路由键" aria-hidden="true">#</a> 2.4.1 使用 Header 作为路由键</h4><p>在某些情况下，routingKey 需要被用于其他目的（如交换器间绑定）。在这种情况下可以配置一致性哈希交换器基于消息头进行路由。</p><p>使用的方法是，在创建一致性哈希交换器时指定 <code>hash-header</code> 参数来声明需要作为路由键的 header。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token constant">EXCHANGE</span> <span class="token operator">=</span> <span class="token string">&quot;e2&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> <span class="token constant">EXCHANGE_TYPE</span> <span class="token operator">=</span> <span class="token string">&quot;x-consistent-hash&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;hash-header&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hash-on&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ch<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE</span><span class="token punctuation">,</span> <span class="token constant">EXCHANGE_TYPE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码创建了一个一致性哈希交换器，使用消息的 <code>hash-on</code> 这个 header 作为路由键。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span> bldr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hdrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  hdrs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;hash-on&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ch<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> bldr<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>hdrs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在发送消息时指定消息 header 中的 <code>hash-on</code> 属性，作为消息的路由键。</p><h4 id="_2-4-2-使用消息属性作为路由键" tabindex="-1"><a class="header-anchor" href="#_2-4-2-使用消息属性作为路由键" aria-hidden="true">#</a> 2.4.2 使用消息属性作为路由键</h4><p>还可以使用消息属性作为路由键，直接使用消息的 <code>message_id</code>、<code>correlation_id</code> 或 <code>timestamp</code> 属性来进行路由。</p><p>使用的方法是在创建一致性哈希交换器时用 <code>hash-property</code> 参数指定消息的路由属性名称。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token constant">EXCHANGE</span> <span class="token operator">=</span> <span class="token string">&quot;e3&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> <span class="token constant">EXCHANGE_TYPE</span> <span class="token operator">=</span> <span class="token string">&quot;x-consistent-hash&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;hash-property&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;message_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ch<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE</span><span class="token punctuation">,</span> <span class="token constant">EXCHANGE_TYPE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码将 <code>message_id</code> 作为路由键。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span> bldr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ch<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> bldr<span class="token punctuation">.</span><span class="token function">messageId</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码在发送消息时设置消息的 <code>message_id</code>，被用作路由键。</p><h2 id="_3-原理" tabindex="-1"><a class="header-anchor" href="#_3-原理" aria-hidden="true">#</a> 3. 原理</h2>`,46),h=p('<p>简单地说是在 erlang 的分布式数据库 mnesia 中初始化了一个哈希环，每个队列在哈希环上对应多个虚拟节点（虚拟节点的个数就是绑定时指定的权重）。</p><p>当新的队列（或其他绑定）被添加到交换器时，它将通过哈希值被映射到哈希环上。每个队列可能占据哈希环上的一个或多个位置点（由其权重决定），从而在消息分配时提供更多的均匀性。当消息进入交换器时，它也将哈希到这个环上，然后被路由到环上位置等于或顺时针最接近的队列。</p><p>下图是权重为 1 时的路由场景：</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202310170128445.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>但是哈希算法并不保证节点均匀分配到哈希换上，所以需要用更多地虚拟节点来让节点更均匀地分布。</p><p>当权重为 3 时，每个节点（队列）会“分身“成多个虚拟节点，示意图如下：</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202310170128513.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',8),b={href:"https://www.cloudamqp.com/blog/part2-rabbitmq-best-practice-for-high-performance.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/rabbitmq/rabbitmq-consistent-hash-exchange#rabbitmq-consistent-hash-exchange-type",target:"_blank",rel:"noopener noreferrer"},f=n("hr",null,null,-1),q=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),_=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function y(x,E){const t=e("ExternalLinkIcon"),o=e("RouterLink");return i(),l("div",null,[n("p",null,[s("原文地址："),n("a",k,[s("http://hscarb.github.io/rabbitmq/20231016-rabbitmq-consistent-hash-exchange.html"),a(t)])]),d,n("p",null,[s("在 CloudAMQP 的 "),n("a",m,[s("RabbitMQ 高性能最佳实践"),a(t)]),s(" 中提到了使用一致性哈希交换器（Consistent hash exchange plugin）来让消息在多个队列中负载均衡。有了它，我们就可以将一个队列拆分成多个子队列，平均地分布在每个节点上，让节点间负载均衡。")]),g,n("p",null,[s("一致性哈希交换器的原理与普通的一致性哈希实现类似，"),a(o,{to:"/other/20231015-consistent-hash.html"},{default:u(()=>[s("可以看这篇文章：一致性哈希 原理和实现")]),_:1}),s("。")]),h,n("ul",null,[n("li",null,[n("p",null,[n("a",b,[s("Part 2: RabbitMQ Best Practice for High Performance (High Throughput)"),a(t)])])]),n("li",null,[n("p",null,[n("a",v,[s("RabbitMQ Consistent Hash Exchange Type"),a(t)])])])]),f,q,_])}const S=c(r,[["render",y],["__file","20231016-rabbitmq-consistent-hash-exchange.html.vue"]]);export{S as default};
