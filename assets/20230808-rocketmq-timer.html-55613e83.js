import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as u,a as n,b as s,d as t,e as p}from"./app-0919a417.js";const i={},l={href:"http://hscarb.github.io/rocketmq/20230808-rocketmq-timer.html",target:"_blank",rel:"noopener noreferrer"},k=p('<h1 id="rocketmq-5-0-任意时间定时消息-rip-43-原理详解-源码解析" tabindex="-1"><a class="header-anchor" href="#rocketmq-5-0-任意时间定时消息-rip-43-原理详解-源码解析" aria-hidden="true">#</a> Rocketmq 5.0 任意时间定时消息（RIP-43） 原理详解 &amp; 源码解析</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><h3 id="_1-1-概念和应用场景" tabindex="-1"><a class="header-anchor" href="#_1-1-概念和应用场景" aria-hidden="true">#</a> 1.1 概念和应用场景</h3><p>延迟消息（定时消息）即消息到达消息队列服务端后不会马上投递，而是到达某个时间才投递给消费者。它在在当前的互联网环境中有非常大的需求。</p><p>例如电商/网约车等业务中都会出现的订单场景，客户下单后并不会马上付款，但是这个订单也不可能一直开着，因为订单会占用商品/网约车资源。这时候就需要一个机制，在比如 5 分钟后进行一次回调，回调关闭订单的方法。 这个回调的触发可以用分布式定时任务来处理，，但是更好的方法可以是使用消息队列发送一个延迟消息，因为一条消息会比一个分布式定时任务轻量得多。 开启一个消费者消费订单取消 Topic 的消息，收到消息后关闭订单，简单高效。</p><p>当用户支付了订单，那么这个订单不再需要被取消，刚才发的延迟消息也不再需要被投递。当然，你可以在消费消息时判断一下订单的状态以确定是否需要关闭，但是这样做会有一次额外的数据库操作。如果可以取消定时消息，那么只要发送一条定时消息取消的命令就可以取消之前发送的定时消息投递。</p><p>除此之外，定时消息还能用于更多其他场景，如定时任务触发、等待重试、事件预订等等。</p><h3 id="_1-2-延迟消息与定时消息" tabindex="-1"><a class="header-anchor" href="#_1-2-延迟消息与定时消息" aria-hidden="true">#</a> 1.2 延迟消息与定时消息</h3><p>首先需要明确延迟消息与定时消息虽然意思不同，但在体现的效果上确实相同的，都是在消息生产到 Broker 之一段时间之后才会被投递（消费者可以消费到）。只不过在使用的 API 上，延迟消息指定延迟的时间，而定时消息指定确切的投递时间。实际上它们可以实现相同的效果。</p>',9),r={href:"https://github.com/HScarb/knowledge/blob/master/rocketmq/20220313-rocketmq-scheduled-message.md",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/HScarb/knowledge/blob/master/rocketmq/20220320-rocketmq-scheduled-message-4.9.3-improve.md",target:"_blank",rel:"noopener noreferrer"},m=p(`<p>许多公司不满足于它的能力，自研了任意时间定时消息，扩展了最大定时时长。</p><p>在 Rocketmq 5.x 中终于开源了支持任意时间的定时消息（以下简称定时消息）。它与 4.x 的延迟消息是两套实现机制，互相之间几乎不影响。</p><h3 id="_1-2-任意时间定时消息的使用" tabindex="-1"><a class="header-anchor" href="#_1-2-任意时间定时消息的使用" aria-hidden="true">#</a> 1.2 任意时间定时消息的使用</h3><p>在 Rocketmq 5.x 的客户端中，在构造消息时提供了 3 个 API 来指定延迟时间或定时时间。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;Hello scheduled message &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 延迟 10s 后投递</span>
message<span class="token punctuation">.</span><span class="token function">setDelayTimeSec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 延迟 10000ms 后投递</span>
message<span class="token punctuation">.</span><span class="token function">setDelayTimeMs</span><span class="token punctuation">(</span><span class="token number">10_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 定时投递，定时时间为当前时间 + 10000ms</span>
message<span class="token punctuation">.</span><span class="token function">setDeliverTimeMs</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 发送消息</span>
<span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-概要设计" tabindex="-1"><a class="header-anchor" href="#_2-概要设计" aria-hidden="true">#</a> 2. 概要设计</h2><h3 id="_2-1-任意时间定时消息的难点" tabindex="-1"><a class="header-anchor" href="#_2-1-任意时间定时消息的难点" aria-hidden="true">#</a> 2.1 任意时间定时消息的难点</h3><p>任意时间定时消息的实现存在一定的难点，所以 4.x 才会实现 18 个延迟等级的定时消息，作为一个折衷的方案。</p><p>任意时间定时消息的主要难点有以下几个。</p><h4 id="_2-1-1-难点1-任意的定时时间" tabindex="-1"><a class="header-anchor" href="#_2-1-1-难点1-任意的定时时间" aria-hidden="true">#</a> 2.1.1 难点1：任意的定时时间</h4><p>Rocketmq 4.x 的延迟消息的原理简单来说是：将延迟消息先不存到真正的 Topic，先存到一个延迟 Topic，然后周期性扫描这个 Topic 还未投递的消息是否到期，到期则投递到真正的 Topic 中。</p><p>这个方案的局限性在于扫描的每个队列的消息延迟时间必须是相同的。否则会出现先扫描的消息要后投递的情况，如下图所示：</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/knowledge/2023/07/1689609879534.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>队列中的第一个消息延迟 100s，从队列头开始扫描，需要等待第一个消息先投递，从队列中弹出，后面的消息才能投递。所以第一条消息会<strong>阻塞</strong>后续消息的投递。</p><p>为了避免这个问题，Rocketmq 4.x 的延迟 Topic 中包含 18 个队列，每个队列代表一个延迟等级，对应一个<strong>固定的延迟时长</strong>，用一个周期性任务去扫描。</p><p>但任意时间定时消息不可能无限制地增加延迟时长对应的队列数量，这是一个难点。</p><h4 id="_2-1-2-难点2-定时消息的存储和老化" tabindex="-1"><a class="header-anchor" href="#_2-1-2-难点2-定时消息的存储和老化" aria-hidden="true">#</a> 2.1.2 难点2：定时消息的存储和老化</h4><p>我们知道 Rocketmq 的消息是有老化时间的，默认时间为 3 天。这就意味着延迟时间超过 3 天的消息可能会被老化清除，永远无法投递。</p><p>让定时消息不受老化时间的限制，这也是一个难点。</p><h4 id="_2-1-3-难点3-大量定时消息的极端情况" tabindex="-1"><a class="header-anchor" href="#_2-1-3-难点3-大量定时消息的极端情况" aria-hidden="true">#</a> 2.1.3 难点3：大量定时消息的极端情况</h4><p>在定时消息场景下有一种极端情况，就是在同一时刻定时了超大量的消息，需要在一瞬间投递（比如在 8 点定时了 1 亿条消息）。</p><p>如果不进行流控直接写入，会把 Rocketmq 冲垮。</p><h3 id="_2-2-设计思路" tabindex="-1"><a class="header-anchor" href="#_2-2-设计思路" aria-hidden="true">#</a> 2.2 设计思路</h3><h4 id="_2-2-1-任意时间定时" tabindex="-1"><a class="header-anchor" href="#_2-2-1-任意时间定时" aria-hidden="true">#</a> 2.2.1 任意时间定时</h4><p>实现任意时间的定时的要点在于知道在某一时刻需要投递哪些消息，以及破除一个队列只能保存同一个延迟等级的消息的限制。</p><p>联想 Rocketmq 的索引文件 <code>IndexFile</code>，可以通过索引文件来辅助定时消息的查询。需要建立这样的一个索引结构：Key 是时间戳，Value 表示这个时间要投递的所有定时消息。类似如下的结构：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">Long</span> <span class="token comment">/* 投递时间戳 */</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Message</span> <span class="token comment">/* 被定时的消息 */</span><span class="token operator">&gt;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把这个索引结构以文件的形式实现，其中的 <code>Message</code> 可以仅保存消息的存储位置，投递的时候再查出来。</p><hr><p>RIP-43 中就引入了这样的两个存储文件：<code>TimerWheel</code> 和 <code>TimerLog</code>，存储结构如下图所示：</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202308072300082.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>TimerWheel</code> 是时间轮的抽象，表示投递时间，它保存了 2 天（默认）内的所有时间窗。每个槽位表示一个对应的投递时间窗，并且可以调整槽位对应的时间窗长度来控制定时的精确度。</p><p>采用时间轮的好处是它可以复用，在 2 天之后无需新建时间轮文件，而是只要将当前的时间轮直接覆盖即可。</p><p><code>TimerLog</code> 是定时消息文件，保存定时消息的索引（在<code>CommitLog</code> 中存储的位置）。它的存储结构类似 <code>CommitLog</code>，是 Append-only Log。</p><p><code>TimerWheel</code> 中的每个槽位都可以保存一个指向 <code>TimerLog</code> 中某个元素的索引，<code>TimerLog</code> 中的元素又保存它前一个元素的索引。也就是说，<code>TimerLog</code> 呈链表结构，存储着 <code>TimerWheel</code> 对应槽位时间窗所要投递的所有定时消息。</p><h4 id="_2-2-2-定时消息轮转-避免定时消息被老化删除" tabindex="-1"><a class="header-anchor" href="#_2-2-2-定时消息轮转-避免定时消息被老化删除" aria-hidden="true">#</a> 2.2.2 定时消息轮转：避免定时消息被老化删除</h4><p>为了防止定时消息在投递之前就被老化删除，能想到的办法主要是两个：</p><ol><li>用单独的文件存储，不受 Rocketmq 老化时间限制</li><li>在定时消息被老化之前，重新将他放入 <code>CommitLog</code></li></ol><p>方法 1 需要引入新的存储文件，占用磁盘空间；方法 2 则需要在消息被老化前重新将其放入 <code>CommitLog</code>，增加了处理逻辑的复杂性。</p><p>RIP-43 中选择了第二种方案，在定时消息<strong>放入时间轮前</strong>进行判断，如果在 2 天内要投递（在时间轮的时间窗口之内），则放入时间轮，否则重新放入 <code>CommitLog</code> 进行轮转。</p><h4 id="_2-2-3-定时任务划分和解耦" tabindex="-1"><a class="header-anchor" href="#_2-2-3-定时任务划分和解耦" aria-hidden="true">#</a> 2.2.3 定时任务划分和解耦</h4><p>RIP-43 中，将定时消息的保存和投递分为多个步骤。为每个步骤单独定义了一个服务线程来处理。</p><p>保存：</p><ol><li>从定时消息 Topic 中扫描定时消息</li><li>将定时消息（偏移量）放入 <code>TimerLog</code> 和 <code>TimeWheel</code> 保存</li></ol><p>投递：</p><ol><li>从时间轮中扫描到期的定时消息（偏移量）</li><li>根据定时消息偏移量，到 <code>CommitLog</code> 中查询完整的消息体</li><li>将查到的消息投递到 <code>CommitLog</code> 的目标 Topic</li></ol><p>每两个步骤之间都使用了生产-消费模式，用一个有界的 <code>BlockingQueue</code> 作为任务的缓冲区，通过缓冲区实现每个步骤的流量控制。当队列满时，新的任务需要等待，无法直接执行。</p><h2 id="_3-详细设计" tabindex="-1"><a class="header-anchor" href="#_3-详细设计" aria-hidden="true">#</a> 3. 详细设计</h2><h3 id="_3-1-定时消息文件设计" tabindex="-1"><a class="header-anchor" href="#_3-1-定时消息文件设计" aria-hidden="true">#</a> 3.1 定时消息文件设计</h3><p>RIP-43 中引入了两个采用本地文件系统存储的文件：<code>TimerWheel</code> 和 <code>TimerLog</code></p><h4 id="_3-1-1-timerwheel-时间轮" tabindex="-1"><a class="header-anchor" href="#_3-1-1-timerwheel-时间轮" aria-hidden="true">#</a> 3.1.1 <code>TimerWheel</code> 时间轮</h4><p>时间轮是对时刻表的抽象，内部实际上是一个数组，表示一段时间。每项都是一个槽位，表示时刻表上的每一秒。采用时间轮的好处在于它可以循环使用，在时间轮表示的这段时间过去之后，无需创建新的文件，直接可以表示下一段时间。</p><p>时间轮的每个槽位表示这一时刻需要投递的所有定时消息，槽位中保存了指向 <code>TimerLog</code> 的指针，与 <code>TimerLog</code> 一同构成一个链表，表示这组消息。</p><p>时间轮的槽位设计如下：</p><table><thead><tr><th>delayed_time(8B) 延迟时间</th><th>first_pos(8B) 首条位置</th><th>last_pos(8B) 最后位置</th><th>num(4B)消息条数</th></tr></thead></table><ul><li><p><code>first_pos</code>：TimerLog 中该时刻定时消息链表的第一个消息的物理偏移量（链表尾）</p></li><li><p><code>last_pos</code>：TimerLog 中该时刻定时消息链表的最后（最新）一个消息的物理偏移量（链表头）</p></li></ul><h4 id="_3-1-2-timerlog-定时消息索引文件" tabindex="-1"><a class="header-anchor" href="#_3-1-2-timerlog-定时消息索引文件" aria-hidden="true">#</a> 3.1.2 <code>TimerLog</code> 定时消息索引文件</h4><p><code>TimerLog</code> 与 <code>TimerWheel</code> 配合，一起表示某一时刻需要投递的定时消息集合。</p><p>它的形式是与 <code>CommitLog</code> 相似的 Append-only Log，不过每一项不需要保存消息的全量信息，只保存了消息在 <code>CommitLog</code> 上的物理偏移量，节省空间。</p><p>它与 <code>TimerWheel</code> 中的槽位组成链表结构，所以它的每一项也有一个指向该项上一项的指针。</p><p>它的每一项结构如下：</p><table><thead><tr><th>名称</th><th>大小</th><th>备注</th></tr></thead><tbody><tr><td>size</td><td>4B</td><td>保存记录的大小</td></tr><tr><td>prev_pos</td><td>8B</td><td>前一条记录的位置</td></tr><tr><td>next_Pos</td><td>8B</td><td>后一条记录的位置，暂时为-1，作为保留字段</td></tr><tr><td>magic</td><td>4B</td><td>magic value</td></tr><tr><td>delayed_time</td><td>4B</td><td>该条记录的定时时间</td></tr><tr><td>offset_real</td><td>8B</td><td>该条消息在commitLog中的位置</td></tr><tr><td>size_real</td><td>4B</td><td>该条消息在commitLog中的大小</td></tr><tr><td>hash_topic</td><td>4B</td><td>该条消息topic的hash code</td></tr><tr><td>varbody</td><td></td><td>存储可变的body，暂时没有为空</td></tr></tbody></table><h3 id="_3-2-定时消息投递步骤" tabindex="-1"><a class="header-anchor" href="#_3-2-定时消息投递步骤" aria-hidden="true">#</a> 3.2 定时消息投递步骤</h3><p>定时消息主要的逻辑可以分为<strong>保存</strong>和<strong>投递</strong>两个阶段，RIP-43 将每个节点都拆分成不同的任务（服务线程），用生产-消费模式衔接每个任务，实现任务的解耦和流控。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202308081638752.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如上图所示，带有 <code>enqueue</code> 的为定时消息保存的线程和队列，带有 <code>dequeue</code> 的为定时消息投递的线程和队列。</p><h4 id="_3-2-1-定时消息保存" tabindex="-1"><a class="header-anchor" href="#_3-2-1-定时消息保存" aria-hidden="true">#</a> 3.2.1 定时消息保存</h4><p>定时消息在被保存到 <code>CommitLog</code> 前，会检查其的属性，如果消息属性中包含定时属性，则会将真正要投递的 Topic 暂存到消息属性中，把投递的 Topic 改成 <code>rmq_sys_wheel_timer</code>。</p><p>随后等待服务线程扫描这个定时 Topic 中的消息，放入时间轮，开始定时。</p><p>为了避免瞬时保存的定时消息过多，所以采用了生产-消费模式，将保存的过程分为扫描和入轮两个步骤。</p><h5 id="timerenqueuegetservice-扫描定时消息" tabindex="-1"><a class="header-anchor" href="#timerenqueuegetservice-扫描定时消息" aria-hidden="true">#</a> <code>TimerEnqueueGetService</code> 扫描定时消息</h5><p>这个线程通过遍历消费队列索引的方式不断扫描定时消息 Topic 中新的定时消息。</p><p>扫描到了之后将消息从 <code>CommitLog</code> 中查出来，封装成 <code>TimerRequest</code>，放入有界阻塞队列 <code>enqueuePutQueue</code>。如果队列满，则会无限次重试等待，达到流控效果。</p><h5 id="timerenqueueputservice-将定时消息放入时间轮和-timerlog" tabindex="-1"><a class="header-anchor" href="#timerenqueueputservice-将定时消息放入时间轮和-timerlog" aria-hidden="true">#</a> <code>TimerEnqueuePutService</code> 将定时消息放入时间轮和 <code>TimerLog</code></h5><p>不断扫描队列 <code>enqueuePutQueue</code>，取出 <code>TimerRequest</code>，并<strong>批量</strong>放入 <code>TimerLog</code>，再放入时间轮槽位。一批结束之后再操作下一批。</p><p>如果定时时间小于当前写 <code>TimerLog</code> 的时间，说明消息已经到期，直接加入到 <code>dequeuePutQueue</code>，准备投递到 <code>CommitLog</code>。</p><h4 id="_3-2-2-定时消息投递" tabindex="-1"><a class="header-anchor" href="#_3-2-2-定时消息投递" aria-hidden="true">#</a> 3.2.2 定时消息投递</h4><p>投递的步骤被分为三个任务：</p><ol><li>从时间轮中扫描到期的定时消息（偏移量）</li><li>根据定时消息偏移量，到 <code>CommitLog</code> 中查询完整的消息体</li><li>将查到的消息投递到 <code>CommitLog</code> 的目标 Topic</li></ol><h5 id="timerdequeuegetservice-扫描时间轮中到期的消息" tabindex="-1"><a class="header-anchor" href="#timerdequeuegetservice-扫描时间轮中到期的消息" aria-hidden="true">#</a> <code>TimerDequeueGetService</code> 扫描时间轮中到期的消息</h5><p>这个线程的作用是：推进时间轮，将时间轮槽位对应的定时消息请求从时间轮和 <code>TimerLog</code> 中取出，加入到 <code>dequeueGetQueue</code> 中。</p><ul><li><p>每 0.1s 执行一次，根据当前扫描时间轮的时间戳，从时间轮和 <code>TimerLog</code> 中查询出 <code>TimerRequest</code>，并分成定时请求和定时消息取消请求两类。</p></li><li><p>先批量将取消请求入队，等待处理完毕，再将定时消息请求入队，等待处理完毕。</p></li><li><p>该槽位的定时消息都处理完成后，推进时间轮扫描时间到下一槽位。</p></li></ul><h5 id="timerdequeuegetmessageservice-查询原始消息" tabindex="-1"><a class="header-anchor" href="#timerdequeuegetmessageservice-查询原始消息" aria-hidden="true">#</a> <code>TimerDequeueGetMessageService</code> 查询原始消息</h5><p>这个线程的作用是：处理 <code>dequeueGetQueue</code> 中的 <code>TimerRequest</code>，根据索引在 <code>CommitLog</code> 中查出原始消息，放到 <code>dequeuePutQueue</code>。</p><ul><li>从 <code>dequeueGetQueue</code> 中取出 <code>TimerRequest</code></li><li>对取出的 <code>TimerRequst</code>，从 <code>CommitLog</code> 中查询原始消息</li><li>处理定时消息取消请求，查询出原始消息中要取消消息的 <code>UNIQ_KEY</code>，放入 <code>deleteUniqKeys</code> Set</li><li>处理普通定时消息请求 <ul><li>如果 <code>DeleteUniqKeys</code> 中包含这个消息，则什么都不做（取消投递）</li><li>否则将查出的原始消息放入 <code>TimerRequest</code>，然后将 <code>TimerRequest</code> 放入 <code>dequeuePutQueue</code>，准备投递到 <code>CommitLog</code></li></ul></li></ul><h5 id="timerdequeueputmessageservice-投递定时消息" tabindex="-1"><a class="header-anchor" href="#timerdequeueputmessageservice-投递定时消息" aria-hidden="true">#</a> <code>TimerDequeuePutMessageService</code> 投递定时消息</h5><p>这个线程的作用是：将消息从 <code>dequeuePutQueue</code> 中取出，若已经到期，投递到 <code>CommitLog</code> 中</p><ul><li>无限循环从 <code>dequeuePutQueue</code> 中取出 <code>TimerRequest</code></li><li>将原始消息的 Topic 和 queueId 从消息属性中取出，用它们构造成一个新的消息</li><li>将消息投递到 <code>CommitLog</code></li><li>如果投递失败，则需要等待{精确度 / 2}时间然后重新投递，必须保证消息投递成功。</li></ul><h3 id="_3-3-其他设计" tabindex="-1"><a class="header-anchor" href="#_3-3-其他设计" aria-hidden="true">#</a> 3.3 其他设计</h3><h4 id="_3-3-1-定时消息文件的恢复" tabindex="-1"><a class="header-anchor" href="#_3-3-1-定时消息文件的恢复" aria-hidden="true">#</a> 3.3.1 定时消息文件的恢复</h4><p>Broker 可能存在正常或者异常宕机。<code>TimerLog</code> 和 <code>TimerWheel</code> 都有做定时持久化，所以对于已经持久化的数据影响不大。</p><p>对于在内存中还未持久化的数据，可以通过 <code>TimerLog</code> 原封不动地还原出来。在 RIP-43 中设置了 <code>Checkpoint</code> 文件，以记录 <code>TimerLog</code> 中已经被 <code>TimerWheel</code> 记录的消息 offset。在重新启动时，将从该 <code>checkpoint</code> 记录的位置重新开始向后遍历 <code>TimerLog</code> 文件，并开始订正 <code>TimerWheel</code> 每一格中的头尾消息索引。</p><h4 id="_3-3-2-随机读-pagecache-污染问题" tabindex="-1"><a class="header-anchor" href="#_3-3-2-随机读-pagecache-污染问题" aria-hidden="true">#</a> 3.3.2 随机读/PageCache 污染问题</h4><p>在 <code>TimerLog</code> 和 <code>CommitLog</code> 中去查询定时消息，都不可避免发生随机读。若要避免这个情况，势必要对消息的写入作进一步优化：排序，或者按时间轮的定位情况写入多个文件。但是这样可能带来另一个问题：大量的随机写。</p><p>正如俗话说的，“读写难两全”。由于<strong>定时消息对于写入更加敏感</strong>，所以可以<strong>牺牲一定的读性能来保障写入的速度</strong>——当然，在性能测试中，该方案的读性能同样令人满意。</p><h4 id="_3-3-3-另一种实现方案-rocksdb" tabindex="-1"><a class="header-anchor" href="#_3-3-3-另一种实现方案-rocksdb" aria-hidden="true">#</a> 3.3.3 另一种实现方案：RocksDB</h4><p>RIP-43 中还提出了另一种任意时间定时消息的实现方案，即使用 RocksDB（一种 KV 本地存储）。</p><p>使用这种方式存储定时消息，将定时时间作为 Key，消息作为 Value，可以做到根据时间查询该时刻的所有定时消息。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202308081824587.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>Key：定时时间 + Topic + 消息 ID</p></li><li><p>Value：定时消息数据</p></li></ul><p>根据 Key 扫描 RocksDB 中的定时消息，如果到期则用生产-消费模式投递到 <code>CommitLog</code> 中。</p><hr><p>这种方式的优点是：</p><ol><li>流程较简单。</li><li>可以避免消息的滚动导致的写放大。</li><li>一定程度上避免 pagecache 的污染。</li></ol><p>缺点是：</p><ol><li>写入时需要排序，会额外消耗时间。</li><li>在对 key 进行 compaction 的过程中可能会耗费额外的 CPU 资源。</li><li>消息的检索需要消耗较多的计算资源。</li></ol><p>最终没有选用这种方案的考量：</p><p>延时消息的写入速度与读取速度难以平衡。</p><ol><li>若 value 较大，大量消息的存储会导致 compaction 计算量较大。随着消息存储量的增加，<strong>写入速度将逐渐变慢</strong>。</li><li>若采用 kv 分离以此保障写的速度，则<strong>读消息的速度将受到较严重的影响</strong>。</li></ol><h2 id="_4-源码解析" tabindex="-1"><a class="header-anchor" href="#_4-源码解析" aria-hidden="true">#</a> 4. 源码解析</h2><h3 id="_4-1-定时消息文件" tabindex="-1"><a class="header-anchor" href="#_4-1-定时消息文件" aria-hidden="true">#</a> 4.1 定时消息文件</h3><h4 id="_4-1-1-timerwheel" tabindex="-1"><a class="header-anchor" href="#_4-1-1-timerwheel" aria-hidden="true">#</a> 4.1.1 <code>TimerWheel</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 时间轮，用于定时消息到时
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerWheel</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 槽位总数，默认为 604,800，为 7 天内的秒数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> slotsTotal<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 定时精度，默认 1s
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> precisionMs<span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
     * 根据时间戳获取槽位下标
     * 
     * <span class="token keyword">@param</span> <span class="token parameter">timeMs</span> 时间戳
     * <span class="token keyword">@return</span> 槽位下标
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSlotIndex</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 时间除以精度，然后对槽位总数 * 2取余</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>timeMs <span class="token operator">/</span> precisionMs <span class="token operator">%</span> <span class="token punctuation">(</span>slotsTotal <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 将 TimerLog 写入的消息放入时间轮槽
     *
     * <span class="token keyword">@param</span> <span class="token parameter">timeMs</span> 定时投递时间
     * <span class="token keyword">@param</span> <span class="token parameter">firstPos</span> 该定时时间的第一条消息在 TimerLog 中的物理偏移量
     * <span class="token keyword">@param</span> <span class="token parameter">lastPos</span> 该定时时间的最后（最新）一条消息在 TimerLog 中的物理偏移量
     * <span class="token keyword">@param</span> <span class="token parameter">num</span> 该定时时间的消息数量
     * <span class="token keyword">@param</span> <span class="token parameter">magic</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putSlot</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeMs<span class="token punctuation">,</span> <span class="token keyword">long</span> firstPos<span class="token punctuation">,</span> <span class="token keyword">long</span> lastPos<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> magic<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        localBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token function">getSlotIndex</span><span class="token punctuation">(</span>timeMs<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Slot</span><span class="token punctuation">.</span><span class="token constant">SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        localBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>timeMs <span class="token operator">/</span> precisionMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        localBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>firstPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        localBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>lastPos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        localBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        localBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>magic<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 根据时间戳获取槽位
     * 
     * <span class="token keyword">@param</span> <span class="token parameter">timeMs</span> 时间戳
     * <span class="token keyword">@return</span> 槽位
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Slot</span> <span class="token function">getSlot</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Slot</span> slot <span class="token operator">=</span> <span class="token function">getRawSlot</span><span class="token punctuation">(</span>timeMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>slot<span class="token punctuation">.</span>timeMs <span class="token operator">!=</span> timeMs <span class="token operator">/</span> precisionMs <span class="token operator">*</span> precisionMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Slot</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> slot<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//testable</span>
    <span class="token keyword">public</span> <span class="token class-name">Slot</span> <span class="token function">getRawSlot</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        localBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token function">getSlotIndex</span><span class="token punctuation">(</span>timeMs<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Slot</span><span class="token punctuation">.</span><span class="token constant">SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Slot</span><span class="token punctuation">(</span>localBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> precisionMs<span class="token punctuation">,</span>
            localBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> localBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> localBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> localBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-2-timerlog" tabindex="-1"><a class="header-anchor" href="#_4-1-2-timerlog" aria-hidden="true">#</a> 4.1.2 <code>TimerLog</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerLog</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 将定时消息索引写入 TimerLog
     *
     * <span class="token keyword">@param</span> <span class="token parameter">data</span>
     * <span class="token keyword">@param</span> <span class="token parameter">pos</span>
     * <span class="token keyword">@param</span> <span class="token parameter">len</span>
     * <span class="token keyword">@return</span> TimerLog 写入的物理偏移量，写入失败返回 -1
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MappedFile</span> mappedFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">getLastMappedFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> mappedFile <span class="token operator">||</span> mappedFile<span class="token punctuation">.</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            mappedFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">getLastMappedFile</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> mappedFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Create mapped file1 error for timer log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token constant">MIN_BLANK_LEN</span> <span class="token operator">&gt;</span> mappedFile<span class="token punctuation">.</span><span class="token function">getFileSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> mappedFile<span class="token punctuation">.</span><span class="token function">getWrotePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token constant">MIN_BLANK_LEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            byteBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>mappedFile<span class="token punctuation">.</span><span class="token function">getFileSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> mappedFile<span class="token punctuation">.</span><span class="token function">getWrotePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            byteBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            byteBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token constant">BLANK_MAGIC_CODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedFile<span class="token punctuation">.</span><span class="token function">appendMessage</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//need to set the wrote position</span>
                mappedFile<span class="token punctuation">.</span><span class="token function">setWrotePosition</span><span class="token punctuation">(</span>mappedFile<span class="token punctuation">.</span><span class="token function">getFileSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Append blank error for timer log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            mappedFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappedFileQueue<span class="token punctuation">.</span><span class="token function">getLastMappedFile</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> mappedFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;create mapped file2 error for timer log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> currPosition <span class="token operator">=</span> mappedFile<span class="token punctuation">.</span><span class="token function">getFileFromOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> mappedFile<span class="token punctuation">.</span><span class="token function">getWrotePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将定时消息索引写入 TimerLog</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedFile<span class="token punctuation">.</span><span class="token function">appendMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Append error for timer log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> currPosition<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 根据偏移量获取 Buffer
     * 
     * <span class="token keyword">@param</span> <span class="token parameter">offsetPy</span> TimerLog 中的物理偏移量
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">SelectMappedBufferResult</span> <span class="token function">getWholeBuffer</span><span class="token punctuation">(</span><span class="token keyword">long</span> offsetPy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MappedFile</span> mappedFile <span class="token operator">=</span> mappedFileQueue<span class="token punctuation">.</span><span class="token function">findMappedFileByOffset</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> mappedFile<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mappedFile<span class="token punctuation">.</span><span class="token function">selectMappedBuffer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-定时消息投递步骤" tabindex="-1"><a class="header-anchor" href="#_4-2-定时消息投递步骤" aria-hidden="true">#</a> 4.2 定时消息投递步骤</h3><h4 id="_4-2-1-timerenqueuegetservice-保存——扫描定时消息" tabindex="-1"><a class="header-anchor" href="#_4-2-1-timerenqueuegetservice-保存——扫描定时消息" aria-hidden="true">#</a> 4.2.1 <code>TimerEnqueueGetService</code> 保存——扫描定时消息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 从 commitLog 读取指定主题（TIMER_TOPIC）的定时消息，放入 enqueuePutQueue
 *
 * <span class="token keyword">@param</span> <span class="token parameter">queueId</span> 定时消息主题队列 ID，默认为 0（定时消息主题只有一个队列）
 * <span class="token keyword">@return</span> 是否取到消息
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> queueId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>storeConfig<span class="token punctuation">.</span><span class="token function">isTimerStopEnqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRunningEnqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 获取定时消息主题的消费队列</span>
    <span class="token class-name">ConsumeQueue</span> cq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConsumeQueue</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageStore<span class="token punctuation">.</span><span class="token function">getConsumeQueue</span><span class="token punctuation">(</span><span class="token constant">TIMER_TOPIC</span><span class="token punctuation">,</span> queueId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> cq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 更新当前读取的队列偏移量</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currQueueOffset <span class="token operator">&lt;</span> cq<span class="token punctuation">.</span><span class="token function">getMinOffsetInQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Timer currQueueOffset:{} is smaller than minOffsetInQueue:{}&quot;</span><span class="token punctuation">,</span> currQueueOffset<span class="token punctuation">,</span> cq<span class="token punctuation">.</span><span class="token function">getMinOffsetInQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        currQueueOffset <span class="token operator">=</span> cq<span class="token punctuation">.</span><span class="token function">getMinOffsetInQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> offset <span class="token operator">=</span> currQueueOffset<span class="token punctuation">;</span>
    <span class="token class-name">SelectMappedBufferResult</span> bufferCQ <span class="token operator">=</span> cq<span class="token punctuation">.</span><span class="token function">getIndexBuffer</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> bufferCQ<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 遍历消费队列中的索引，查询消息，封装成 TimerRequest，放入 enqueuePutQueue</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bufferCQ<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            perfs<span class="token punctuation">.</span><span class="token function">startTick</span><span class="token punctuation">(</span><span class="token string">&quot;enqueue_get&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">long</span> offsetPy <span class="token operator">=</span> bufferCQ<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> sizePy <span class="token operator">=</span> bufferCQ<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                bufferCQ<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//tags code</span>
                <span class="token class-name">MessageExt</span> msgExt <span class="token operator">=</span> <span class="token function">getMessageByCommitOffset</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> msgExt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    perfs<span class="token punctuation">.</span><span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token string">&quot;enqueue_get_miss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    lastEnqueueButExpiredTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    lastEnqueueButExpiredStoreTime <span class="token operator">=</span> msgExt<span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">long</span> delayedTime <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>msgExt<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">TIMER_OUT_MS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// use CQ offset, not offset in Message</span>
                    msgExt<span class="token punctuation">.</span><span class="token function">setQueueOffset</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">TimerRequest</span> timerRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerRequest</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">,</span> delayedTime<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">MAGIC_DEFAULT</span><span class="token punctuation">,</span> msgExt<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 无限次重试，直到成功放入 enqueuePutQueue，达到流控效果</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>enqueuePutQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>timerRequest<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRunningEnqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//here may cause the message loss</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>storeConfig<span class="token punctuation">.</span><span class="token function">isTimerSkipUnknownError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown error in skipped in enqueuing&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">holdMomentForUnknownError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                perfs<span class="token punctuation">.</span><span class="token function">endTick</span><span class="token punctuation">(</span><span class="token string">&quot;enqueue_get&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//if broker role changes, ignore last enqueue</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRunningEnqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 移动消费队列下标，到下一个消费队列索引</span>
            currQueueOffset <span class="token operator">=</span> offset <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        currQueueOffset <span class="token operator">=</span> offset <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token class-name">ConsumeQueue</span><span class="token punctuation">.</span><span class="token constant">CQ_STORE_UNIT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown exception in enqueuing&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        bufferCQ<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-timerenqueueputservice-保存——定时消息放入时间轮" tabindex="-1"><a class="header-anchor" href="#_4-2-2-timerenqueueputservice-保存——定时消息放入时间轮" aria-hidden="true">#</a> 4.2.2 <code>TimerEnqueuePutService</code> 保存——定时消息放入时间轮</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// TimerEnqueuePutService</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TimerMessageStore</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> enqueuePutQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> tmpCommitQueueOffset <span class="token operator">=</span> currQueueOffset<span class="token punctuation">;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TimerRequest</span><span class="token punctuation">&gt;</span></span> trs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token comment">//collect the requests</span>
            <span class="token class-name">TimerRequest</span> firstReq <span class="token operator">=</span> enqueuePutQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果队列中有 TimerRequest，循环将队列中的所有 TimerRequest 都取出</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> firstReq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                trs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                trs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>firstReq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TimerRequest</span> tmpReq <span class="token operator">=</span> enqueuePutQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> tmpReq<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    trs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmpReq<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>trs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 队列中没有 TimerRequest，更新 commitQueueOffset 和 ，直接跳过</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>trs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                commitQueueOffset <span class="token operator">=</span> tmpCommitQueueOffset<span class="token punctuation">;</span>
                <span class="token function">maybeMoveWriteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 并发将 TimerRequest 中的消息写入到 TimerLog 中</span>
                <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>trs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TimerRequest</span> req <span class="token operator">:</span> trs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    req<span class="token punctuation">.</span><span class="token function">setLatch</span><span class="token punctuation">(</span>latch<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        perfs<span class="token punctuation">.</span><span class="token function">startTick</span><span class="token punctuation">(</span><span class="token string">&quot;enqueue_put&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">DefaultStoreMetricsManager</span><span class="token punctuation">.</span><span class="token function">incTimerEnqueueCount</span><span class="token punctuation">(</span><span class="token function">getRealTopic</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldRunningDequeue <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span><span class="token function">getDelayTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> currWriteTimeMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 如果定时时间小于当前写 TimerLog 的时间，说明消息已经到期</span>
                            <span class="token comment">// 直接加入到 dequeuePutQueue，准备投递到 CommitLog</span>
                            dequeuePutQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 将 TimerRequest 加入 TimerLog 和时间轮</span>
                            <span class="token keyword">boolean</span> doEnqueueRes <span class="token operator">=</span> <span class="token function">doEnqueue</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getOffsetPy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">getSizePy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">getDelayTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            req<span class="token punctuation">.</span><span class="token function">idempotentRelease</span><span class="token punctuation">(</span>doEnqueueRes <span class="token operator">||</span> storeConfig<span class="token punctuation">.</span><span class="token function">isTimerSkipUnknownError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        perfs<span class="token punctuation">.</span><span class="token function">endTick</span><span class="token punctuation">(</span><span class="token string">&quot;enqueue_put&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown error&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>storeConfig<span class="token punctuation">.</span><span class="token function">isTimerSkipUnknownError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            req<span class="token punctuation">.</span><span class="token function">idempotentRelease</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token function">holdMomentForUnknownError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 检查和等待 CountDownLatch</span>
                <span class="token function">checkDequeueLatch</span><span class="token punctuation">(</span>latch<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">boolean</span> allSucc <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TimerRequest</span> tr <span class="token operator">:</span> trs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    allSucc <span class="token operator">=</span> allSucc <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">.</span><span class="token function">isSucc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>allSucc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 全部写入成功</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 有写入失败，等待 0.05s</span>
                    <span class="token function">holdMomentForUnknownError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 更新 commitQueueOffset 和 currWriteTimeMs</span>
            commitQueueOffset <span class="token operator">=</span> trs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>trs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueueOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">maybeMoveWriteTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimerMessageStore</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown error&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">TimerMessageStore</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 将 CommitLog 中的定时消息放入 TimerLog 和时间轮
 *
 * <span class="token keyword">@param</span> <span class="token parameter">offsetPy</span> 索引项在 TimerLog 中的物理偏移量
 * <span class="token keyword">@param</span> <span class="token parameter">sizePy</span> 索引项在 TimerLog 中的大小
 * <span class="token keyword">@param</span> <span class="token parameter">delayedTime</span> 定时投递时间
 * <span class="token keyword">@param</span> <span class="token parameter">messageExt</span> 索引项对应的消息
 * <span class="token keyword">@return</span> 写入 TimerLog 是否成功
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">doEnqueue</span><span class="token punctuation">(</span><span class="token keyword">long</span> offsetPy<span class="token punctuation">,</span> <span class="token keyword">int</span> sizePy<span class="token punctuation">,</span> <span class="token keyword">long</span> delayedTime<span class="token punctuation">,</span> <span class="token class-name">MessageExt</span> messageExt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Do enqueue [{}] [{}]&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span>delayedTime<span class="token punctuation">)</span><span class="token punctuation">,</span> messageExt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//copy the value first, avoid concurrent problem</span>
    <span class="token keyword">long</span> tmpWriteTimeMs <span class="token operator">=</span> currWriteTimeMs<span class="token punctuation">;</span>
    <span class="token comment">// 判断定时消息是否需要轮转。判断依据为：定时消息是不是近 2 天内要投递，不是则需要轮转</span>
    <span class="token keyword">boolean</span> needRoll <span class="token operator">=</span> delayedTime <span class="token operator">-</span> tmpWriteTimeMs <span class="token operator">&gt;=</span> timerRollWindowSlots <span class="token operator">*</span> precisionMs<span class="token punctuation">;</span>
    <span class="token keyword">int</span> magic <span class="token operator">=</span> <span class="token constant">MAGIC_DEFAULT</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>needRoll<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        magic <span class="token operator">=</span> magic <span class="token operator">|</span> <span class="token constant">MAGIC_ROLL</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>delayedTime <span class="token operator">-</span> tmpWriteTimeMs <span class="token operator">-</span> timerRollWindowSlots <span class="token operator">*</span> precisionMs <span class="token operator">&lt;</span> timerRollWindowSlots <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> precisionMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//give enough time to next roll</span>
            delayedTime <span class="token operator">=</span> tmpWriteTimeMs <span class="token operator">+</span> <span class="token punctuation">(</span>timerRollWindowSlots <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> precisionMs<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            delayedTime <span class="token operator">=</span> tmpWriteTimeMs <span class="token operator">+</span> timerRollWindowSlots <span class="token operator">*</span> precisionMs<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 是否是取消定时消息</span>
    <span class="token keyword">boolean</span> isDelete <span class="token operator">=</span> messageExt<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token constant">TIMER_DELETE_UNIQKEY</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>isDelete<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        magic <span class="token operator">=</span> magic <span class="token operator">|</span> <span class="token constant">MAGIC_DELETE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> realTopic <span class="token operator">=</span> messageExt<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_REAL_TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取定时消息对应的时间轮槽</span>
    <span class="token class-name">Slot</span> slot <span class="token operator">=</span> timerWheel<span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span>delayedTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ByteBuffer</span> tmpBuffer <span class="token operator">=</span> timerLogBuffer<span class="token punctuation">;</span>
    tmpBuffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    tmpBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token class-name">TimerLog</span><span class="token punctuation">.</span><span class="token constant">UNIT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//size</span>
    tmpBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>slot<span class="token punctuation">.</span>lastPos<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//prev pos</span>
    tmpBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>magic<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//magic</span>
    tmpBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>tmpWriteTimeMs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//currWriteTime</span>
    tmpBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>delayedTime <span class="token operator">-</span> tmpWriteTimeMs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//delayTime</span>
    tmpBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//offset</span>
    tmpBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>sizePy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//size</span>
    tmpBuffer<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token function">hashTopicForMetrics</span><span class="token punctuation">(</span>realTopic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//hashcode of real topic</span>
    tmpBuffer<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//reserved value, just set to 0 now</span>
    <span class="token keyword">long</span> ret <span class="token operator">=</span> timerLog<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tmpBuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimerLog</span><span class="token punctuation">.</span><span class="token constant">UNIT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">!=</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 写入 TimerLog 成功，将写入 TimerLog 的消息加入时间轮</span>
        <span class="token comment">// If it&#39;s a delete message, then slot&#39;s total num -1</span>
        <span class="token comment">// TODO: check if the delete msg is in the same slot with &quot;the msg to be deleted&quot;.</span>
        timerWheel<span class="token punctuation">.</span><span class="token function">putSlot</span><span class="token punctuation">(</span>delayedTime<span class="token punctuation">,</span> slot<span class="token punctuation">.</span>firstPos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> ret <span class="token operator">:</span> slot<span class="token punctuation">.</span>firstPos<span class="token punctuation">,</span> ret<span class="token punctuation">,</span>
            isDelete <span class="token operator">?</span> slot<span class="token punctuation">.</span>num <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> slot<span class="token punctuation">.</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> slot<span class="token punctuation">.</span>magic<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addMetric</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">,</span> isDelete <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">!=</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-3-timerdequeuegetservice-投递——扫描时间轮中到期的消息" tabindex="-1"><a class="header-anchor" href="#_4-2-3-timerdequeuegetservice-投递——扫描时间轮中到期的消息" aria-hidden="true">#</a> 4.2.3 <code>TimerDequeueGetService</code> 投递——扫描时间轮中到期的消息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取时间轮一个槽位中对应的 TimerLog 定时消息请求列表，放入 dequeueGetQueue 中处理
 *
 * <span class="token keyword">@return</span> 0：当前读取的时间轮槽为空 no message，1：处理成功，2：处理失败
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Exception</span></span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>storeConfig<span class="token punctuation">.</span><span class="token function">isTimerStopDequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRunningDequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currReadTimeMs <span class="token operator">&gt;=</span> currWriteTimeMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 根据当前时间轮扫描的时间戳，获取时间轮当前槽</span>
    <span class="token class-name">Slot</span> slot <span class="token operator">=</span> timerWheel<span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span>currReadTimeMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> slot<span class="token punctuation">.</span>timeMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果当前槽为空，推进时间轮并返回</span>
        <span class="token function">moveReadTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//clear the flag</span>
        dequeueStatusChangeFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取 TimerLog 中的物理偏移量</span>
        <span class="token keyword">long</span> currOffsetPy <span class="token operator">=</span> slot<span class="token punctuation">.</span>lastPos<span class="token punctuation">;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> deleteUniqKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentSkipListSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 普通定时消息请求栈</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TimerRequest</span><span class="token punctuation">&gt;</span></span> normalMsgStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 定时消息取消请求栈</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TimerRequest</span><span class="token punctuation">&gt;</span></span> deleteMsgStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// TimerLog Buffer 队列</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectMappedBufferResult</span><span class="token punctuation">&gt;</span></span> sbrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SelectMappedBufferResult</span> timeSbr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 从 TimerLog 链表中一个一个读取索引项，放入请求栈</span>
        <span class="token comment">//read the timer log one by one</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>currOffsetPy <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            perfs<span class="token punctuation">.</span><span class="token function">startTick</span><span class="token punctuation">(</span><span class="token string">&quot;dequeue_read_timerlog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> timeSbr <span class="token operator">||</span> timeSbr<span class="token punctuation">.</span><span class="token function">getStartOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> currOffsetPy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                timeSbr <span class="token operator">=</span> timerLog<span class="token punctuation">.</span><span class="token function">getWholeBuffer</span><span class="token punctuation">(</span>currOffsetPy<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> timeSbr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    sbrs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>timeSbr<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> timeSbr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// TimerLog 链表前一个索引项的物理偏移量</span>
            <span class="token keyword">long</span> prevPos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>currOffsetPy <span class="token operator">%</span> timerLogFileSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
                timeSbr<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>
                timeSbr<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//size</span>
                prevPos <span class="token operator">=</span> timeSbr<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> magic <span class="token operator">=</span> timeSbr<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">long</span> enqueueTime <span class="token operator">=</span> timeSbr<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">long</span> delayedTime <span class="token operator">=</span> timeSbr<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> enqueueTime<span class="token punctuation">;</span>
                <span class="token keyword">long</span> offsetPy <span class="token operator">=</span> timeSbr<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> sizePy <span class="token operator">=</span> timeSbr<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 读取 TimerLog 索引项，构造出 TimerRequest</span>
                <span class="token class-name">TimerRequest</span> timerRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerRequest</span><span class="token punctuation">(</span>offsetPy<span class="token punctuation">,</span> sizePy<span class="token punctuation">,</span> delayedTime<span class="token punctuation">,</span> enqueueTime<span class="token punctuation">,</span> magic<span class="token punctuation">)</span><span class="token punctuation">;</span>
                timerRequest<span class="token punctuation">.</span><span class="token function">setDeleteList</span><span class="token punctuation">(</span>deleteUniqKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">needDelete</span><span class="token punctuation">(</span>magic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">needRoll</span><span class="token punctuation">(</span>magic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 取消定时请求</span>
                    deleteMsgStack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>timerRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 普通定时消息请求</span>
                    normalMsgStack<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>timerRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error in dequeue_read_timerlog&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">// 读取 TimerLog 链表中前一项</span>
                currOffsetPy <span class="token operator">=</span> prevPos<span class="token punctuation">;</span>
                perfs<span class="token punctuation">.</span><span class="token function">endTick</span><span class="token punctuation">(</span><span class="token string">&quot;dequeue_read_timerlog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>deleteMsgStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> normalMsgStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;dequeue time:{} but read nothing from timerlog&quot;</span><span class="token punctuation">,</span> currReadTimeMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SelectMappedBufferResult</span> sbr <span class="token operator">:</span> sbrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> sbr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sbr<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRunningDequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 分批将定时消息删除请求放入 dequeueGetQueue 去处理</span>
        <span class="token class-name">CountDownLatch</span> deleteLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>deleteMsgStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//read the delete msg: the msg used to mark another msg is deleted</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TimerRequest</span><span class="token punctuation">&gt;</span></span> deleteList <span class="token operator">:</span> <span class="token function">splitIntoLists</span><span class="token punctuation">(</span>deleteMsgStack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TimerRequest</span> tr <span class="token operator">:</span> deleteList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tr<span class="token punctuation">.</span><span class="token function">setLatch</span><span class="token punctuation">(</span>deleteLatch<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            dequeueGetQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>deleteList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 等待定时消息删除请求处理（放入 dequeuePutQueue）</span>
        <span class="token comment">//do we need to use loop with tryAcquire</span>
        <span class="token function">checkDequeueLatch</span><span class="token punctuation">(</span>deleteLatch<span class="token punctuation">,</span> currReadTimeMs<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 分批将定时消息请求放入 dequeueGetQueue 去处理</span>
        <span class="token class-name">CountDownLatch</span> normalLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>normalMsgStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//read the normal msg</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TimerRequest</span><span class="token punctuation">&gt;</span></span> normalList <span class="token operator">:</span> <span class="token function">splitIntoLists</span><span class="token punctuation">(</span>normalMsgStack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TimerRequest</span> tr <span class="token operator">:</span> normalList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tr<span class="token punctuation">.</span><span class="token function">setLatch</span><span class="token punctuation">(</span>normalLatch<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            dequeueGetQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>normalList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 等待定时消息请求处理（放入 dequeuePutQueue）</span>
        <span class="token function">checkDequeueLatch</span><span class="token punctuation">(</span>normalLatch<span class="token punctuation">,</span> currReadTimeMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// if master -&gt; slave -&gt; master, then the read time move forward, and messages will be lossed</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dequeueStatusChangeFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRunningDequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 推进时间轮</span>
        <span class="token function">moveReadTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown error in dequeue process&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>storeConfig<span class="token punctuation">.</span><span class="token function">isTimerSkipUnknownError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">moveReadTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-4-timerdequeuegetmessageservice-投递——查询原始消息" tabindex="-1"><a class="header-anchor" href="#_4-2-4-timerdequeuegetmessageservice-投递——查询原始消息" aria-hidden="true">#</a> 4.2.4 <code>TimerDequeueGetMessageService</code> 投递——查询原始消息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">AbstractStateService</span><span class="token punctuation">.</span><span class="token constant">START</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TimerMessageStore</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">AbstractStateService</span><span class="token punctuation">.</span><span class="token constant">WAITING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 取出到期的 TimerRequest</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TimerRequest</span><span class="token punctuation">&gt;</span></span> trs <span class="token operator">=</span> dequeueGetQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> precisionMs <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> trs <span class="token operator">||</span> trs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">AbstractStateService</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 遍历 TimerRequest</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> trs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">TimerRequest</span> tr <span class="token operator">=</span> trs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">boolean</span> doRes <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 从 CommitLog 中查询原始消息</span>
                    <span class="token class-name">MessageExt</span> msgExt <span class="token operator">=</span> <span class="token function">getMessageByCommitOffset</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span><span class="token function">getOffsetPy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tr<span class="token punctuation">.</span><span class="token function">getSizePy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> msgExt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">needDelete</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span><span class="token function">getMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">needRoll</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span><span class="token function">getMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 删除消息请求</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>msgExt<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_TIMER_DEL_UNIQKEY</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">.</span><span class="token function">getDeleteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                tr<span class="token punctuation">.</span><span class="token function">getDeleteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msgExt<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_TIMER_DEL_UNIQKEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token comment">// 处理删除消息请求成功，CountDownLatch -1</span>
                            tr<span class="token punctuation">.</span><span class="token function">idempotentRelease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            doRes <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 普通消息请求</span>
                            <span class="token class-name">String</span> uniqkey <span class="token operator">=</span> <span class="token class-name">MessageClientIDSetter</span><span class="token punctuation">.</span><span class="token function">getUniqID</span><span class="token punctuation">(</span>msgExt<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> uniqkey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;No uniqkey for msg:{}&quot;</span><span class="token punctuation">,</span> msgExt<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> uniqkey <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">.</span><span class="token function">getDeleteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">.</span><span class="token function">getDeleteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tr<span class="token punctuation">.</span><span class="token function">getDeleteList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>uniqkey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token comment">// 定时消息取消，什么都不做</span>
                                doRes <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                                <span class="token comment">// 处理定时消息请求成功，CountDownLatch -1</span>
                                tr<span class="token punctuation">.</span><span class="token function">idempotentRelease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                perfs<span class="token punctuation">.</span><span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token string">&quot;dequeue_delete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                <span class="token comment">// 将查出的原始消息放入 TimerRequest，然后放入 dequeuePutQueue，准备投递到 CommitLog</span>
                                tr<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>msgExt<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>doRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    doRes <span class="token operator">=</span> dequeuePutQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>tr<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                        perfs<span class="token punctuation">.</span><span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token string">&quot;dequeue_get_msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flow</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token comment">//the tr will never be processed afterwards, so idempotentRelease it</span>
                        tr<span class="token punctuation">.</span><span class="token function">idempotentRelease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        doRes <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        perfs<span class="token punctuation">.</span><span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token string">&quot;dequeue_get_msg_miss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flow</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>storeConfig<span class="token punctuation">.</span><span class="token function">isTimerSkipUnknownError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        tr<span class="token punctuation">.</span><span class="token function">idempotentRelease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        doRes <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token function">holdMomentForUnknownError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 本 TimerRequest 求处理成功，处理下一个 TimerRequest，否则重新处理本 TimerRequest</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>doRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        i<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            trs<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimerMessageStore</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurred in &quot;</span> <span class="token operator">+</span> <span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">TimerMessageStore</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">AbstractStateService</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-5-timerdequeueputmessageservice-投递——投递定时消息" tabindex="-1"><a class="header-anchor" href="#_4-2-5-timerdequeueputmessageservice-投递——投递定时消息" aria-hidden="true">#</a> 4.2.5 <code>TimerDequeuePutMessageService</code> 投递——投递定时消息</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">AbstractStateService</span><span class="token punctuation">.</span><span class="token constant">START</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TimerMessageStore</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> dequeuePutQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">AbstractStateService</span><span class="token punctuation">.</span><span class="token constant">WAITING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TimerRequest</span> tr <span class="token operator">=</span> dequeuePutQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> tr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">AbstractStateService</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 投递结果是否成功</span>
            <span class="token keyword">boolean</span> doRes <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> tmpDequeueChangeFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>doRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRunningDequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        dequeueStatusChangeFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        tmpDequeueChangeFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        perfs<span class="token punctuation">.</span><span class="token function">startTick</span><span class="token punctuation">(</span><span class="token string">&quot;dequeue_put&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">DefaultStoreMetricsManager</span><span class="token punctuation">.</span><span class="token function">incTimerDequeueCount</span><span class="token punctuation">(</span><span class="token function">getRealTopic</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">addMetric</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 将原始定时消息的 Topic 和 QueueId 等信息复原，构造一个新的消息</span>
                        <span class="token class-name">MessageExtBrokerInner</span> msg <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tr<span class="token punctuation">.</span><span class="token function">getEnqueueTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">needRoll</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span><span class="token function">getMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 投递到 CommitLog</span>
                        doRes <span class="token operator">=</span> <span class="token constant">PUT_NEED_RETRY</span> <span class="token operator">!=</span> <span class="token function">doPut</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token function">needRoll</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span><span class="token function">getMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>doRes <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isStopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 如果投递失败需要重试，等待{精确度 / 2}时间然后重新投递</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRunningDequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                dequeueStatusChangeFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                                tmpDequeueChangeFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            doRes <span class="token operator">=</span> <span class="token constant">PUT_NEED_RETRY</span> <span class="token operator">!=</span> <span class="token function">doPut</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token function">needRoll</span><span class="token punctuation">(</span>tr<span class="token punctuation">.</span><span class="token function">getMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> precisionMs <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        perfs<span class="token punctuation">.</span><span class="token function">endTick</span><span class="token punctuation">(</span><span class="token string">&quot;dequeue_put&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown error&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>storeConfig<span class="token punctuation">.</span><span class="token function">isTimerSkipUnknownError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            doRes <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            <span class="token function">holdMomentForUnknownError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                tr<span class="token punctuation">.</span><span class="token function">idempotentRelease</span><span class="token punctuation">(</span><span class="token operator">!</span>tmpDequeueChangeFlag<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TimerMessageStore</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurred in &quot;</span> <span class="token operator">+</span> <span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">TimerMessageStore</span><span class="token punctuation">.</span><span class="token constant">LOGGER</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; service end&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">AbstractStateService</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,128),v={href:"https://github.com/apache/rocketmq/pull/4642/files",target:"_blank",rel:"noopener noreferrer"},b={href:"https://shimo.im/docs/gXqme9PKKpIeD7qo/read",target:"_blank",rel:"noopener noreferrer"},f={href:"https://mp.weixin.qq.com/s/iZL8M88gF7s5NmW7DYyYDQ",target:"_blank",rel:"noopener noreferrer"},g=n("hr",null,null,-1),h=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),y=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function w(q,T){const a=o("ExternalLinkIcon");return c(),u("div",null,[n("p",null,[s("原文地址："),n("a",l,[s("http://hscarb.github.io/rocketmq/20230808-rocketmq-timer.html"),t(a)])]),k,n("p",null,[s("在 Rocketmq 4.x 中只支持通过设定延迟等级来支持 18 个固定延迟时间。具体的原理可以看 "),n("a",r,[s("RocketMQ 延迟消息（定时消息）源码解析"),t(a)]),s("。")]),n("p",null,[s("4.x 的延迟消息有很大的局限性，它无法支持任意时间的定时，而且最大的定时时间也只有 2 小时，它的性能也达不到普通消息（后来 4.x 的延迟消息性能被优化，详见 "),n("a",d,[s("RocketMQ 延迟消息（定时消息）4.9.3 版本优化 异步投递支持"),t(a)]),s("。")]),m,n("ul",null,[n("li",null,[n("a",v,[s("PR: [RIP-43] Support Timing Messages with Arbitrary Time Delay"),t(a)])]),n("li",null,[n("a",b,[s("RIP-43 Support timing messages with arbitrary time delay"),t(a)])]),n("li",null,[n("a",f,[s("社区在讨论什么？《Support Timing Messages with Arbitrary Time Delay》"),t(a)])])]),g,h,y])}const _=e(i,[["render",w],["__file","20230808-rocketmq-timer.html.vue"]]);export{_ as default};
