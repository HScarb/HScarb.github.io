import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,d as t,e as i}from"./app-6c586bc1.js";const l={},u={href:"http://hscarb.github.io/other/20231015-consistent-hash.html",target:"_blank",rel:"noopener noreferrer"},d=i(`<h1 id="一致性哈希-原理和实现" tabindex="-1"><a class="header-anchor" href="#一致性哈希-原理和实现" aria-hidden="true">#</a> 一致性哈希 原理和实现</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><h3 id="_1-1-使用场景" tabindex="-1"><a class="header-anchor" href="#_1-1-使用场景" aria-hidden="true">#</a> 1.1 使用场景</h3><p>在分布式系统（数据分片）中，为了提高系统容量，就会将数据水平切分到不同的节点来存储，这样每个节点保存的数据可能是不同的。</p><p>比如<strong>一个分布式 KV（key-valu） 缓存系统，它的所有 key 分布在不同节点，但某个 key 应该到哪个或者哪些节点上获得，应该是确定的</strong>。</p><p>在访问这个系统时，我们希望让对相同 key 的操作落在相同的节点上。</p><p>这里就需要使用到一致性哈希算法，将 key 通过一致性哈希计算之后可以得到相同的节点编号。</p><h3 id="_1-1-什么是一致性哈希算法" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是一致性哈希算法" aria-hidden="true">#</a> 1.1 什么是一致性哈希算法</h3><p>了解一致性哈希之前需要先了解<strong>哈希算法</strong>，它的作用是：对任意一组输入数据进行计算，得到一个固定长度的输出摘要。相同的输入一定得到相同的输出，不同的输入大概率得到不同的输出。</p><p>最简单的哈希算法是通过将 key 转换为整数，然后根据节点数取模，比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">simpleHash</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> tableSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> key<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> sum <span class="token operator">%</span> tableSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>tableSize</code> 为分布式系统的节点个数。</p><p>但是当节点数量发生变化时（增加或删除节点），这里的 <code>tableSize</code> 将发生改变，简单的哈希算法无法保证节点数量发生之后，对相同的 key 哈希仍然能够得到同样的结果。这就意味着如果仍然需要正常使用这个分布式系统，对同一个 key 对应的数据来说，它需要迁移到新的哈希结果对应的节点。</p><p>这就需要引入一致性哈希算法，它能够确保只发生少量的数据迁移。</p><h2 id="_2-概要设计" tabindex="-1"><a class="header-anchor" href="#_2-概要设计" aria-hidden="true">#</a> 2. 概要设计</h2><p>上面说到，哈希算法是将 key 用某种方式转换成数字，然后根据节点数取模。当节点数量改变之后计算的结果自然也会改变。</p><h3 id="_2-1-哈希环" tabindex="-1"><a class="header-anchor" href="#_2-1-哈希环" aria-hidden="true">#</a> 2.1 哈希环</h3><p>想要让节点数量改变后计算结果尽可能保持稳定，可以换一个思路：将节点相对均匀地放置在一个环上，然后将 key 经过 hash 的结果距离最近的节点作为哈希的结果。这个环被称为哈希环。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202310170128062.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>如图所示，将 3 个节点均匀分布在范围为 [0, 2^32) 的范围中（也就是 <code>Long</code> 的范围），hash 之后的 key 在哈希环上查找下一个距离它最近的节点，作为哈希的结果。</p><p>下面展示增加和减少节点的场景，无论是增加还是减少节点，都只有较少的映射关系需要改变。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202310170128552.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202310170128751.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-2-不均衡问题和虚拟节点" tabindex="-1"><a class="header-anchor" href="#_2-2-不均衡问题和虚拟节点" aria-hidden="true">#</a> 2.2 不均衡问题和虚拟节点</h3><p>在实际情况下，每个节点在哈希环中的位置也是由 hash 函数计算得到，它的位置是随机的。也就是说可能会存在节点分布不均衡的问题。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202310170128876.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>在上图中，节点分布不均衡，导致大量的哈希结果落在同一个节点上。</p><p>这里引入虚拟节点，即每个节点都在哈希环上“分身”成 N 个节点，这样每个节点的分布就相对更均匀。</p><p>如下图所示，每个节点“分身”成 3 个节点，节点数量多了之后分布也相对均匀。</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202310170128954.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-详细设计" tabindex="-1"><a class="header-anchor" href="#_3-详细设计" aria-hidden="true">#</a> 3. 详细设计</h2><h3 id="_3-1-哈希算法" tabindex="-1"><a class="header-anchor" href="#_3-1-哈希算法" aria-hidden="true">#</a> 3.1 哈希算法</h3><p>首先需要实现一个哈希算法，用哈希算法将字符串转换为 Long，对应哈希环上的位置。常见的哈希算法有：</p><table><thead><tr><th style="text-align:left;">算法</th><th style="text-align:left;">输出长度（位）</th><th style="text-align:left;">输出长度（字节）</th></tr></thead><tbody><tr><td style="text-align:left;">MD5</td><td style="text-align:left;">128 bits</td><td style="text-align:left;">16 bytes</td></tr><tr><td style="text-align:left;">SHA-1</td><td style="text-align:left;">160 bits</td><td style="text-align:left;">20 bytes</td></tr><tr><td style="text-align:left;">RipeMD-160</td><td style="text-align:left;">160 bits</td><td style="text-align:left;">20 bytes</td></tr><tr><td style="text-align:left;">SHA-256</td><td style="text-align:left;">256 bits</td><td style="text-align:left;">32 bytes</td></tr><tr><td style="text-align:left;">SHA-512</td><td style="text-align:left;">512 bits</td><td style="text-align:left;">64 bytes</td></tr></tbody></table><p>可以采用取哈希算法得到结果的前 4 位，转换成 Long。</p><h3 id="_3-2-哈希环" tabindex="-1"><a class="header-anchor" href="#_3-2-哈希环" aria-hidden="true">#</a> 3.2 哈希环</h3><p>哈希环实际上是一个 HashMap，Key 是长整型，表示哈希环上的位置；Value 是虚拟节点（可以是虚拟节点的名称，也可以是虚拟节点类，包含其名称）。</p><p>由于需要向后查找虚拟节点的位置，所以 HashMap 需要根据 Key 排序，在 Java 中的 TreeMap 即为按 Key 排序的 Map 实现。</p><h3 id="_3-3-添加和删除节点" tabindex="-1"><a class="header-anchor" href="#_3-3-添加和删除节点" aria-hidden="true">#</a> 3.3 添加和删除节点</h3><p>首先需要确定节点的虚拟节点数量，比如 10 个。</p><h4 id="_3-3-1-添加节点" tabindex="-1"><a class="header-anchor" href="#_3-3-1-添加节点" aria-hidden="true">#</a> 3.3.1 添加节点</h4><p>添加节点时需指定节点名称，如 NodeA。实际添加时是添加 10 个虚拟节点，名称可以为 NodeA1,NodeA2, ..., NodeA10。</p><p>对虚拟节点名称使用哈希算法，计算出其在哈希环上的位置，并且放入哈希环。</p><h4 id="_3-3-2-删除节点" tabindex="-1"><a class="header-anchor" href="#_3-3-2-删除节点" aria-hidden="true">#</a> 3.3.2 删除节点</h4><p>根据虚拟节点的数量和名称，可以通过哈希算法计算出其所有虚拟节点在哈希环上的位置，然后移除即可。</p><h3 id="_3-4-路由" tabindex="-1"><a class="header-anchor" href="#_3-4-路由" aria-hidden="true">#</a> 3.4 路由</h3><p>路由函数接收一个路由键 key，经过哈希函数计算得出哈希环上的位置，随即向后找离他最近的虚拟节点，即为路由到的节点。</p><p>在 Java 中可以使用 TreeMap，它底层实现是红黑树，可以根据 key 值找到下一个离它最近的节点。</p><h2 id="_4-java-实现" tabindex="-1"><a class="header-anchor" href="#_4-java-实现" aria-hidden="true">#</a> 4. Java 实现</h2><p>这里引用 RocketMQ 中 <code>ConsistentHashRouter</code> 的实现，它用于在发送消息时按照一致性哈希的方式选择 Topic 的目标队列。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Represent a node which should be mapped to a hash ring
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> the key which will be used for hash mapping
     */</span>
    <span class="token class-name">String</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VirtualNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">T</span> physicalNode<span class="token punctuation">;</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> replicaIndex<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">VirtualNode</span><span class="token punctuation">(</span><span class="token class-name">T</span> physicalNode<span class="token punctuation">,</span> <span class="token keyword">int</span> replicaIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>replicaIndex <span class="token operator">=</span> replicaIndex<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>physicalNode <span class="token operator">=</span> physicalNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> physicalNode<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> replicaIndex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isVirtualNodeOf</span><span class="token punctuation">(</span><span class="token class-name">T</span> pNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> physicalNode<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pNode<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getPhysicalNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> physicalNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * To hash Node objects to a hash ring with a certain amount of virtual node.
 * Method routeNode will return a Node instance which the object key should be allocated to according to consistent hash
 * algorithm
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsistentHashRouter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 一致性哈希环
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SortedMap</span><span class="token operator">&lt;</span><span class="token class-name">Long</span> <span class="token comment">/* 哈希环位置，0~2^32-1 */</span><span class="token punctuation">,</span> <span class="token class-name">VirtualNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token comment">/* 虚拟节点 */</span><span class="token operator">&gt;</span> ring <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashFunction</span> hashFunction<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ConsistentHashRouter</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> pNodes<span class="token punctuation">,</span> <span class="token keyword">int</span> vNodeCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>pNodes<span class="token punctuation">,</span> vNodeCount<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MD5Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">pNodes</span> collections of physical nodes
     * <span class="token keyword">@param</span> <span class="token parameter">vNodeCount</span> amounts of virtual nodes
     * <span class="token keyword">@param</span> <span class="token parameter">hashFunction</span> hash Function to hash Node instances
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ConsistentHashRouter</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> pNodes<span class="token punctuation">,</span> <span class="token keyword">int</span> vNodeCount<span class="token punctuation">,</span> <span class="token class-name">HashFunction</span> hashFunction<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hashFunction <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;Hash Function is null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hashFunction <span class="token operator">=</span> hashFunction<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pNodes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在哈希环中为每个物理节点添加 vNodeCount 个虚拟节点</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> pNode <span class="token operator">:</span> pNodes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">addNode</span><span class="token punctuation">(</span>pNode<span class="token punctuation">,</span> vNodeCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 在哈希环中为每个物理节点添加 vNodeCount 个虚拟节点
     * add physic node to the hash ring with some virtual nodes
     *
     * <span class="token keyword">@param</span> <span class="token parameter">pNode</span> physical node needs added to hash ring
     * <span class="token keyword">@param</span> <span class="token parameter">vNodeCount</span> the number of virtual node of the physical node. Value should be greater than or equals to 0
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNode</span><span class="token punctuation">(</span><span class="token class-name">T</span> pNode<span class="token punctuation">,</span> <span class="token keyword">int</span> vNodeCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>vNodeCount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;illegal virtual node counts :&quot;</span> <span class="token operator">+</span> vNodeCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> existingReplicas <span class="token operator">=</span> <span class="token function">getExistingReplicas</span><span class="token punctuation">(</span>pNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vNodeCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">VirtualNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> vNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VirtualNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>pNode<span class="token punctuation">,</span> i <span class="token operator">+</span> existingReplicas<span class="token punctuation">)</span><span class="token punctuation">;</span>
            ring<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>hashFunction<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 从哈希环中移除物理节点
     * remove the physical node from the hash ring
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token class-name">T</span> pNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> ring<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Long</span> key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">VirtualNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> virtualNode <span class="token operator">=</span> ring<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>virtualNode<span class="token punctuation">.</span><span class="token function">isVirtualNodeOf</span><span class="token punctuation">(</span>pNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 找到对应 key 在哈希环上顺时针最近的物理节点
     * with a specified key, route the nearest Node instance in the current hash ring
     *
     * <span class="token keyword">@param</span> <span class="token parameter">objectKey</span> the object key to find a nearest Node
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">routeNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> objectKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ring<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Long</span> hashVal <span class="token operator">=</span> hashFunction<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>objectKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">VirtualNode</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tailMap <span class="token operator">=</span> ring<span class="token punctuation">.</span><span class="token function">tailMap</span><span class="token punctuation">(</span>hashVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> nodeHashVal <span class="token operator">=</span> <span class="token operator">!</span>tailMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> tailMap<span class="token punctuation">.</span><span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> ring<span class="token punctuation">.</span><span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ring<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nodeHashVal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPhysicalNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取物理节点在哈希环中已经存在的虚拟节点数量
     *
     * <span class="token keyword">@param</span> <span class="token parameter">pNode</span> 物理节点
     * <span class="token keyword">@return</span> 在哈希环中已经存在的虚拟节点数量
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getExistingReplicas</span><span class="token punctuation">(</span><span class="token class-name">T</span> pNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> replicas <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">VirtualNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> vNode <span class="token operator">:</span> ring<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode<span class="token punctuation">.</span><span class="token function">isVirtualNodeOf</span><span class="token punctuation">(</span>pNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                replicas<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> replicas<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 默认的一致性哈希方法，取 MD5 值的前 4 位
     */</span>
    <span class="token comment">//default hash function</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MD5Hash</span> <span class="token keyword">implements</span> <span class="token class-name">HashFunction</span> <span class="token punctuation">{</span>
        <span class="token class-name">MessageDigest</span> instance<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">MD5Hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                instance <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;MD5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchAlgorithmException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            instance<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            instance<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digest <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">long</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 取 MD5 值的前 4 位，转换成长整型</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                h <span class="token operator">&lt;&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>
                h <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> digest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> h<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,53),k={href:"https://www.xiaolincoding.com/os/8_network_system/hash.html",target:"_blank",rel:"noopener noreferrer"},r={href:"https://www.liaoxuefeng.com/wiki/1252599548343744/1304227729113121",target:"_blank",rel:"noopener noreferrer"},v=n("hr",null,null,-1),m=n("p",null,"欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！",-1),h=n("figure",null,[n("img",{src:"https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function b(g,y){const a=p("ExternalLinkIcon");return o(),c("div",null,[n("p",null,[s("原文地址："),n("a",u,[s("http://hscarb.github.io/other/20231015-consistent-hash.html"),t(a)])]),d,n("ul",null,[n("li",null,[n("a",k,[s("什么是一致性哈希？"),t(a)])]),n("li",null,[n("a",r,[s("哈希算法"),t(a)])])]),v,m,h])}const N=e(l,[["render",b],["__file","20231015-consistent-hash.html.vue"]]);export{N as default};
