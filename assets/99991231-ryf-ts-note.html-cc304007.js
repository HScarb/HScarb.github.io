import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,b as s,d as e,e as p}from"./app-1db75faf.js";const i={},r={href:"http://hscarb.github.io/other/99991231-ryf-ts-note.html",target:"_blank",rel:"noopener noreferrer"},d=n("h1",{id:"阮一峰-typescript-教程-笔记",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#阮一峰-typescript-教程-笔记","aria-hidden":"true"},"#"),s(" 阮一峰 TypeScript 教程 笔记")],-1),u={href:"https://wangdoc.com/typescript/",target:"_blank",rel:"noopener noreferrer"},k=p(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><h3 id="_1-3-动态类型与静态类型" tabindex="-1"><a class="header-anchor" href="#_1-3-动态类型与静态类型" aria-hidden="true">#</a> 1.3 动态类型与静态类型</h3><p>TypeScript 引入了一个更强大、更严格的类型系统，属于静态类型语言。变量类型和属性都是静态的，不允许随机增删</p><h2 id="_2-基本用法" tabindex="-1"><a class="header-anchor" href="#_2-基本用法" aria-hidden="true">#</a> 2. 基本用法</h2><h3 id="_2-3-typescript-的编译" tabindex="-1"><a class="header-anchor" href="#_2-3-typescript-的编译" aria-hidden="true">#</a> 2.3 TypeScript 的编译</h3><p>TypeScript 官方没有做运行环境，只提供编译器。编译时，会将类型声明和类型相关的代码全部删除，只留下能运行的 JavaScript 代码，并且不会改变 JavaScript 的运行结果。</p><h3 id="_2-6-tsc-编译器" tabindex="-1"><a class="header-anchor" href="#_2-6-tsc-编译器" aria-hidden="true">#</a> 2.6 tsc 编译器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> typescript
tsc <span class="token parameter variable">-v</span>
tsc <span class="token parameter variable">-h</span>
tsc <span class="token parameter variable">--all</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> typescript <span class="token parameter variable">-D</span>
<span class="token function">pnpm</span> tsc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc file1.ts file2.ts <span class="token parameter variable">--outFile</span> app.js	<span class="token comment"># 多个文件编译成一个</span>
tsc app.ts <span class="token parameter variable">--outDir</span> dist	<span class="token comment"># 指定保存到其他目录</span>
tsc <span class="token parameter variable">--target</span> es2015 app.ts	<span class="token comment"># 指定编译后的 JavaScript 版本</span>
tsc <span class="token parameter variable">--noEmitOnError</span> app.ts	<span class="token comment"># 报错就停止编译，不生成编译产物</span>
tsc <span class="token parameter variable">--noEmit</span> app.ts			<span class="token comment"># 只检查类型是否正确，不生成 JavaScript 文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-6-5-tsconfig-json" tabindex="-1"><a class="header-anchor" href="#_2-6-5-tsconfig-json" aria-hidden="true">#</a> 2.6.5 tsconfig.json</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc file1.ts file2.ts <span class="token parameter variable">--outFile</span> dist/app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面这个命令写成<code>tsconfig.json</code>，就是下面这样。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;files&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;file1.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;file2.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;outFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist/app.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个配置文件，编译时直接调用<code>tsc</code>命令就可以了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ tsc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-7-ts-node-模块" tabindex="-1"><a class="header-anchor" href="#_2-7-ts-node-模块" aria-hidden="true">#</a> 2.7 ts-node 模块</h3>`,17),v={href:"https://github.com/TypeStrong/ts-node",target:"_blank",rel:"noopener noreferrer"},m=p(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> ts-node
$ ts-node script.ts
$ ts-node
<span class="token operator">&gt;</span> const twice <span class="token operator">=</span> <span class="token punctuation">(</span>x:string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> x + x<span class="token punctuation">;</span>
<span class="token operator">&gt;</span> twice<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span>
<span class="token string">&#39;abcabc&#39;</span>
<span class="token operator">&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-any-类型-unknown-类型-never-类型" tabindex="-1"><a class="header-anchor" href="#_3-any-类型-unknown-类型-never-类型" aria-hidden="true">#</a> 3. any 类型，unknown 类型，never 类型</h2><p>TypeScript 有两个“顶层类型”（<code>any</code>和<code>unknown</code>），但是“底层类型”只有<code>never</code>唯一一个。</p><h3 id="_3-1-any-类型" tabindex="-1"><a class="header-anchor" href="#_3-1-any-类型" aria-hidden="true">#</a> 3.1 any 类型</h3><p>没有任何限制，该类型的变量可以赋予任意类型的值。</p><p>对于开发者没有指定类型、TypeScript 必须自己推断类型的那些变量，如果无法推断出类型，TypeScript 就会认为该变量的类型是<code>any</code>。</p><p><code>any</code>类型除了关闭类型检查，还会“污染”其他变量。它可以赋值给其他任何类型的变量（因为没有类型检查），导致其他变量出错。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> x<span class="token operator">:</span><span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>

y <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// 不报错</span>

y <span class="token operator">*</span> <span class="token number">123</span> <span class="token comment">// 不报错</span>
y<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 不报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-unknown-类型" tabindex="-1"><a class="header-anchor" href="#_3-2-unknown-类型" aria-hidden="true">#</a> 3.2 unknown 类型</h3><p>与 <code>any</code> 含义相同，表示类型不确定。解决 <code>any</code> 类型污染问题。</p><p>限制：</p><ol><li><p>不能直接赋值给其他类型的变量（除了<code>any</code>类型和<code>unknown</code>类型）。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> v<span class="token operator">:</span><span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> v1<span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token operator">=</span> v<span class="token punctuation">;</span> <span class="token comment">// 报错</span>
<span class="token keyword">let</span> v2<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> v<span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不能直接调用 <code>unknown</code> 类型变量的方法和属性。</p></li><li><p>能够进行的运算是有限的，只能进行比较运算（运算符<code>==</code>、<code>===</code>、<code>!=</code>、<code>!==</code>、<code>||</code>、<code>&amp;&amp;</code>、<code>?</code>）、取反运算（运算符<code>!</code>）、<code>typeof</code>运算符和<code>instanceof</code>运算符这几种，其他运算都会报错。</p></li></ol><ul><li><p>只有经过类型缩小（缩小 <code>unknown</code> 变量类型范围）才能使用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> r <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> s<span class="token operator">:</span><span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> s <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 正确</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-3-never-类型" tabindex="-1"><a class="header-anchor" href="#_3-3-never-类型" aria-hidden="true">#</a> 3.3 never 类型</h3><p>空类型，不包含任何值。不能给它赋任何值。</p><p>使用场景：</p><ul><li><p>在一些类型运算中，保证类型运算的完整性。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">;</span> <span class="token comment">// never 类型</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
* 可以赋值给任意其他类型

  \`\`\`ts
  function f():never {
    throw new Error(&#39;Error&#39;);
  }
  
  let v1:number = f(); // 不报错
  let v2:string = f(); // 不报错
  let v3:boolean = f(); // 不报错
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-类型系统" tabindex="-1"><a class="header-anchor" href="#_4-类型系统" aria-hidden="true">#</a> 4. 类型系统</h2><h3 id="_4-1-基本类型" tabindex="-1"><a class="header-anchor" href="#_4-1-基本类型" aria-hidden="true">#</a> 4.1 基本类型</h3><p>JavaScript 语言（注意，不是 TypeScript）将值分成8种类型。</p><ul><li>boolean</li><li>string</li><li>number</li><li>bigint</li><li>symbol</li><li>object：对象、数组、函数</li><li>undefined：未定义</li><li>null：空</li></ul><p>TypeScript 继承了 JavaScript 的类型设计，以上8种类型可以看作 TypeScript 的基本类型。</p><p>注意，上面所有类型的名称都是小写字母，首字母大写的<code>Number</code>、<code>String</code>、<code>Boolean</code>等在 JavaScript 语言中都是内置对象，而不是类型名称。</p><p>另外，undefined 和 null 既可以作为值，也可以作为类型，取决于在哪里使用它们。</p><h3 id="_4-2-包装对象类型" tabindex="-1"><a class="header-anchor" href="#_4-2-包装对象类型" aria-hidden="true">#</a> 4.2 包装对象类型</h3><h4 id="_4-2-1-包装对象的概念" tabindex="-1"><a class="header-anchor" href="#_4-2-1-包装对象的概念" aria-hidden="true">#</a> 4.2.1 包装对象的概念</h4><p>JavaScript 的8种类型之中，五种属于原始类型（primitive value），代表最基本的、不可再分的值。</p><ul><li>boolean</li><li>string</li><li>number</li><li>bigint</li><li>symbol</li></ul><p>五种原始类型的值，都有对应的包装对象（wrapper object）。指的是这些值在需要时，会自动产生的对象。</p><p><code>Symbol()</code>和<code>BigInt()</code>不能作为构造函数使用，剩下三种可以。</p><ul><li><code>Boolean()</code></li><li><code>String()</code></li><li><code>Number()</code></li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> s <span class="token comment">// &#39;object&#39;</span>
s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// &#39;e&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-2-包装对象类型与字面量类型" tabindex="-1"><a class="header-anchor" href="#_4-2-2-包装对象类型与字面量类型" aria-hidden="true">#</a> 4.2.2 包装对象类型与字面量类型</h4><p><code>String</code>类型可以赋值为字符串的字面量，也可以赋值为包装对象。但是，<code>string</code>类型只能赋值为字面量，赋值为包装对象就会报错。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> s1<span class="token operator">:</span>String <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>
<span class="token keyword">const</span> s2<span class="token operator">:</span>String <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>

<span class="token keyword">const</span> s3<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>
<span class="token keyword">const</span> s4<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>建议<strong>只使用小写类型</strong>，不使用大写类型。因为绝大部分使用原始类型的场合，都是使用字面量，不使用包装对象。而且，TypeScript 把很多内置方法的参数，定义成小写类型，使用大写类型会报错。</p><h3 id="_4-3-object-类型与-object-类型" tabindex="-1"><a class="header-anchor" href="#_4-3-object-类型与-object-类型" aria-hidden="true">#</a> 4.3 Object 类型与 object 类型</h3><h4 id="_4-3-1-object-类型" tabindex="-1"><a class="header-anchor" href="#_4-3-1-object-类型" aria-hidden="true">#</a> 4.3.1 Object 类型</h4><p>所有可以转成对象的值，都是<code>Object</code>类型，这囊括了几乎所有的值。除了<code>undefined</code>和<code>null</code>这两个值不能转为对象，其他任何值都可以赋值给<code>Object</code>类型。</p><p><code>{}</code>是<code>Object</code>类型的简写形式，所以使用<code>Object</code>时常常用空对象代替。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> obj<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 
obj <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function-variable function">obj</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-2-object-类型" tabindex="-1"><a class="header-anchor" href="#_4-3-2-object-类型" aria-hidden="true">#</a> 4.3.2 object 类型</h4><p>小写的<code>object</code>类型代表 JavaScript 里面的<strong>狭义</strong>对象，即可以用字面量表示的对象，只包含对象、数组和函数，不包括原始类型的值。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> obj<span class="token operator">:</span>object<span class="token punctuation">;</span>
 
obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function-variable function">obj</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
obj <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
obj <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
obj <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数时候，我们使用对象类型，只希望包含真正的对象，不希望包含原始类型。所以，<strong>建议总是使用小写类型<code>object</code></strong>，不使用大写类型<code>Object</code>。</p><h3 id="_4-4-undefined-和-null-的特殊性" tabindex="-1"><a class="header-anchor" href="#_4-4-undefined-和-null-的特殊性" aria-hidden="true">#</a> 4.4 undefined 和 null 的特殊性</h3><p>任何其他类型的变量都可以赋值为<code>undefined</code>或<code>null</code>。</p><h3 id="_4-5-值类型" tabindex="-1"><a class="header-anchor" href="#_4-5-值类型" aria-hidden="true">#</a> 4.5 值类型</h3><p>单个值也是一种类型，称为“值类型”。</p><p>遇到<code>const</code>命令声明的变量，如果代码里面没有注明类型，就会推断该变量是值类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> x<span class="token operator">:</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>

x <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>
x <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>

<span class="token comment">// x 的类型是 &quot;https&quot;</span>
<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token string">&#39;https&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// y 的类型是 string</span>
<span class="token keyword">const</span> y<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;https&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只包含单个值的值类型，用处不大。实际开发中，往往将多个值结合，作为联合类型使用。</p><h3 id="_4-6-联合类型" tabindex="-1"><a class="header-anchor" href="#_4-6-联合类型" aria-hidden="true">#</a> 4.6 联合类型</h3><p>联合类型（union types）指的是多个类型组成的一个新类型，使用符号<code>|</code>表示。</p><p>联合类型<code>A|B</code>表示，任何一个类型只要属于<code>A</code>或<code>B</code>，就属于联合类型<code>A|B</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> x<span class="token operator">:</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token punctuation">;</span>

x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>
x <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>联合类型可以与值类型相结合，表示一个变量的值有若干种可能。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> setting<span class="token operator">:</span><span class="token boolean">true</span><span class="token operator">|</span><span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> gender<span class="token operator">:</span><span class="token string">&#39;male&#39;</span><span class="token operator">|</span><span class="token string">&#39;female&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> rainbowColor<span class="token operator">:</span><span class="token string">&#39;赤&#39;</span><span class="token operator">|</span><span class="token string">&#39;橙&#39;</span><span class="token operator">|</span><span class="token string">&#39;黄&#39;</span><span class="token operator">|</span><span class="token string">&#39;绿&#39;</span><span class="token operator">|</span><span class="token string">&#39;青&#39;</span><span class="token operator">|</span><span class="token string">&#39;蓝&#39;</span><span class="token operator">|</span><span class="token string">&#39;紫&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> name<span class="token operator">:</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> x<span class="token operator">:</span>
  <span class="token operator">|</span> <span class="token string">&#39;one&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;two&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;three&#39;</span>
  <span class="token operator">|</span> <span class="token string">&#39;four&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个变量有多种类型，读取该变量时，往往需要进行“类型缩小”（type narrowing），区分该值到底属于哪一种类型，然后再进一步处理。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getPort</span><span class="token punctuation">(</span>scheme<span class="token operator">:</span> <span class="token string">&#39;http&#39;</span><span class="token operator">|</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>scheme<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&#39;http&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token number">80</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&#39;https&#39;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> <span class="token number">443</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-7-交叉类型" tabindex="-1"><a class="header-anchor" href="#_4-7-交叉类型" aria-hidden="true">#</a> 4.7 交叉类型</h3><p>交叉类型<code>A&amp;B</code>表示，任何一个类型必须同时属于<code>A</code>和<code>B</code>，才属于交叉类型<code>A&amp;B</code>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 主要用途是表示对象的合成</span>
<span class="token keyword">let</span> obj<span class="token operator">:</span>
  <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token operator">&amp;</span>
  <span class="token punctuation">{</span> bar<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  foo<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>
  bar<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 为对象类型添加新属性</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> bar<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-8-type-命令" tabindex="-1"><a class="header-anchor" href="#_4-8-type-命令" aria-hidden="true">#</a> 4.8 type 命令</h3><p><code>type</code>命令用来定义一个类型的别名。作用域是<strong>块级作用域</strong>。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Age</span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> age<span class="token operator">:</span>Age <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-9-typeof-运算符" tabindex="-1"><a class="header-anchor" href="#_4-9-typeof-运算符" aria-hidden="true">#</a> 4.9 typeof 运算符</h3><p>JavaScript 里面，<code>typeof</code>运算符只可能返回八种结果，而且都是字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot;</span>
<span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// &quot;boolean&quot;</span>
<span class="token keyword">typeof</span> <span class="token number">1337</span><span class="token punctuation">;</span> <span class="token comment">// &quot;number&quot;</span>
<span class="token keyword">typeof</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;string&quot;</span>
<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// &quot;object&quot;</span>
<span class="token keyword">typeof</span> parseInt<span class="token punctuation">;</span> <span class="token comment">// &quot;function&quot;</span>
<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;symbol&quot;</span>
<span class="token keyword">typeof</span> <span class="token number">127n</span> <span class="token comment">// &quot;bigint&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 将<code>typeof</code>运算符移植到了类型运算，它的操作数依然是一个值，但是返回的不是字符串，而是该值的 TypeScript 类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> a<span class="token punctuation">;</span>   <span class="token comment">// { x: number }</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> <span class="token keyword">typeof</span> a<span class="token punctuation">.</span>x<span class="token punctuation">;</span> <span class="token comment">// number</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b<span class="token operator">:</span><span class="token keyword">typeof</span> a<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  b <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>typeof</code>命令的参数不能是类型。</p><h3 id="_4-10-块级类型声明" tabindex="-1"><a class="header-anchor" href="#_4-10-块级类型声明" aria-hidden="true">#</a> 4.10 块级类型声明</h3><p>类型可以声明在代码块（用大括号表示）里面，并且只在当前代码块有效。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> v<span class="token operator">:</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> v<span class="token operator">:</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-11-类型的兼容" tabindex="-1"><a class="header-anchor" href="#_4-11-类型的兼容" aria-hidden="true">#</a> 4.11 类型的兼容</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token operator">|</span><span class="token builtin">string</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b<span class="token operator">:</span><span class="token constant">T</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果类型<code>A</code>的值可以赋值给类型<code>B</code>，那么类型<code>A</code>就称为类型<code>B</code>的子类型（subtype）。在上例中，类型<code>number</code>就是类型<code>number|string</code>的子类型。</p><p>凡是可以使用父类型的地方，都可以使用子类型，但是反过来不行。</p><hr><p>欢迎关注公众号【消息中间件】（middleware-mq），更新消息中间件的源码解析和最新动态！</p><figure><img src="https://scarb-images.oss-cn-hangzhou.aliyuncs.com/img/202205170102971.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,83);function b(h,g){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("p",null,[s("原文地址："),n("a",r,[s("http://hscarb.github.io/other/99991231-ryf-ts-note.html"),e(a)])]),d,n("p",null,[n("a",u,[s("https://wangdoc.com/typescript/"),e(a)])]),k,n("p",null,[n("a",v,[s("ts-node"),e(a)]),s(" 是一个非官方的 npm 模块，可以直接运行 TypeScript 代码。")]),m])}const w=t(i,[["render",b],["__file","99991231-ryf-ts-note.html.vue"]]);export{w as default};
